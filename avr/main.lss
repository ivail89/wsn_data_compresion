
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000068  00800100  00000d8a  00000e1e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d8a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  00800168  00800168  00000e86  2**0
                  ALLOC
  3 .stab         00000ac8  00000000  00000000  00000e88  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b64  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 9c 01 	jmp	0x338	; 0x338 <__vector_16>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 0b 01 	jmp	0x216	; 0x216 <__vector_30>
  7c:	0c 94 54 01 	jmp	0x2a8	; 0x2a8 <__vector_31>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e8       	ldi	r30, 0x8A	; 138
  a0:	fd e0       	ldi	r31, 0x0D	; 13
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 36       	cpi	r26, 0x68	; 104
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	11 e0       	ldi	r17, 0x01	; 1
  b4:	a8 e6       	ldi	r26, 0x68	; 104
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 3c       	cpi	r26, 0xC1	; 193
  be:	b1 07       	cpc	r27, r17
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  c6:	0c 94 c3 06 	jmp	0xd86	; 0xd86 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <sendByte>:
unsigned short i_mes = 0;


//используемые функции
void sendByte(unsigned char value)
{
  ce:	df 93       	push	r29
  d0:	cf 93       	push	r28
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	c9 5e       	subi	r28, 0xE9	; 233
  d8:	d3 40       	sbci	r29, 0x03	; 3
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	f8 94       	cli
  de:	de bf       	out	0x3e, r29	; 62
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	cd bf       	out	0x3d, r28	; 61
  e4:	fe 01       	movw	r30, r28
  e6:	e7 51       	subi	r30, 0x17	; 23
  e8:	fc 4f       	sbci	r31, 0xFC	; 252
  ea:	80 83       	st	Z, r24
	char bufer[1000];
	sprintf(bufer, "adress = %d, value = %d\n\r", RAMPointer, value);
  ec:	20 91 6f 01 	lds	r18, 0x016F
  f0:	30 91 70 01 	lds	r19, 0x0170
  f4:	fe 01       	movw	r30, r28
  f6:	e7 51       	subi	r30, 0x17	; 23
  f8:	fc 4f       	sbci	r31, 0xFC	; 252
  fa:	80 81       	ld	r24, Z
  fc:	48 2f       	mov	r20, r24
  fe:	50 e0       	ldi	r21, 0x00	; 0
 100:	8d b7       	in	r24, 0x3d	; 61
 102:	9e b7       	in	r25, 0x3e	; 62
 104:	08 97       	sbiw	r24, 0x08	; 8
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	9e bf       	out	0x3e, r25	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	8d bf       	out	0x3d, r24	; 61
 110:	ed b7       	in	r30, 0x3d	; 61
 112:	fe b7       	in	r31, 0x3e	; 62
 114:	31 96       	adiw	r30, 0x01	; 1
 116:	ce 01       	movw	r24, r28
 118:	01 96       	adiw	r24, 0x01	; 1
 11a:	91 83       	std	Z+1, r25	; 0x01
 11c:	80 83       	st	Z, r24
 11e:	84 e0       	ldi	r24, 0x04	; 4
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	93 83       	std	Z+3, r25	; 0x03
 124:	82 83       	std	Z+2, r24	; 0x02
 126:	35 83       	std	Z+5, r19	; 0x05
 128:	24 83       	std	Z+4, r18	; 0x04
 12a:	57 83       	std	Z+7, r21	; 0x07
 12c:	46 83       	std	Z+6, r20	; 0x06
 12e:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <sprintf>
 132:	8d b7       	in	r24, 0x3d	; 61
 134:	9e b7       	in	r25, 0x3e	; 62
 136:	08 96       	adiw	r24, 0x08	; 8
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	9e bf       	out	0x3e, r25	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	8d bf       	out	0x3d, r24	; 61
	sendStr(bufer);
 142:	ce 01       	movw	r24, r28
 144:	01 96       	adiw	r24, 0x01	; 1
 146:	0e 94 af 00 	call	0x15e	; 0x15e <sendStr>
};
 14a:	c7 51       	subi	r28, 0x17	; 23
 14c:	dc 4f       	sbci	r29, 0xFC	; 252
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	cf 91       	pop	r28
 15a:	df 91       	pop	r29
 15c:	08 95       	ret

0000015e <sendStr>:

void sendStr(char *string){
 15e:	df 93       	push	r29
 160:	cf 93       	push	r28
 162:	00 d0       	rcall	.+0      	; 0x164 <sendStr+0x6>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	9a 83       	std	Y+2, r25	; 0x02
 16a:	89 83       	std	Y+1, r24	; 0x01
	strcpy(message, string);
 16c:	81 e7       	ldi	r24, 0x71	; 113
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	29 81       	ldd	r18, Y+1	; 0x01
 172:	3a 81       	ldd	r19, Y+2	; 0x02
 174:	b9 01       	movw	r22, r18
 176:	0e 94 cf 03 	call	0x79e	; 0x79e <strcpy>
	i_mes=0;		// сбрасываем индекс
 17a:	10 92 6e 01 	sts	0x016E, r1
 17e:	10 92 6d 01 	sts	0x016D, r1
	UDR1 = message[0];	// отправляем первый байт
 182:	ec e9       	ldi	r30, 0x9C	; 156
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 91 71 01 	lds	r24, 0x0171
 18a:	80 83       	st	Z, r24
	UCSR1B|=(1<<UDRIE1);// разрешаем прерываение UDRE
 18c:	aa e9       	ldi	r26, 0x9A	; 154
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	ea e9       	ldi	r30, 0x9A	; 154
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 62       	ori	r24, 0x20	; 32
 198:	8c 93       	st	X, r24
}
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	cf 91       	pop	r28
 1a0:	df 91       	pop	r29
 1a2:	08 95       	ret

000001a4 <nextAdr>:
/*
	функции следят за выходом за границу допустимых значений 
	указателя
*/
void nextAdr()
{
 1a4:	df 93       	push	r29
 1a6:	cf 93       	push	r28
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <nextAdr+0x6>
 1aa:	0f 92       	push	r0
 1ac:	cd b7       	in	r28, 0x3d	; 61
 1ae:	de b7       	in	r29, 0x3e	; 62
	if ( RAMPointer++ > 4096 )
 1b0:	80 91 6f 01 	lds	r24, 0x016F
 1b4:	90 91 70 01 	lds	r25, 0x0170
 1b8:	9b 83       	std	Y+3, r25	; 0x03
 1ba:	8a 83       	std	Y+2, r24	; 0x02
 1bc:	19 82       	std	Y+1, r1	; 0x01
 1be:	8a 81       	ldd	r24, Y+2	; 0x02
 1c0:	9b 81       	ldd	r25, Y+3	; 0x03
 1c2:	20 e1       	ldi	r18, 0x10	; 16
 1c4:	81 30       	cpi	r24, 0x01	; 1
 1c6:	92 07       	cpc	r25, r18
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <nextAdr+0x2a>
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	89 83       	std	Y+1, r24	; 0x01
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	9b 81       	ldd	r25, Y+3	; 0x03
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	90 93 70 01 	sts	0x0170, r25
 1d8:	80 93 6f 01 	sts	0x016F, r24
 1dc:	99 81       	ldd	r25, Y+1	; 0x01
 1de:	99 23       	and	r25, r25
 1e0:	21 f0       	breq	.+8      	; 0x1ea <nextAdr+0x46>
	{
		RAMPointer = 0;
 1e2:	10 92 70 01 	sts	0x0170, r1
 1e6:	10 92 6f 01 	sts	0x016F, r1
	}
}
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	cf 91       	pop	r28
 1f2:	df 91       	pop	r29
 1f4:	08 95       	ret

000001f6 <prevAdr>:

void prevAdr()
{
 1f6:	df 93       	push	r29
 1f8:	cf 93       	push	r28
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	if ( RAMPointer-- < 0 )
 1fe:	80 91 6f 01 	lds	r24, 0x016F
 202:	90 91 70 01 	lds	r25, 0x0170
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	90 93 70 01 	sts	0x0170, r25
 20c:	80 93 6f 01 	sts	0x016F, r24
	{
		RAMPointer = 4095;
	}
}
 210:	cf 91       	pop	r28
 212:	df 91       	pop	r29
 214:	08 95       	ret

00000216 <__vector_30>:

//вектор прерываний

//обработчик прерывания по приходу байта в уарт
ISR (USART1_RX_vect)
{
 216:	1f 92       	push	r1
 218:	0f 92       	push	r0
 21a:	0f b6       	in	r0, 0x3f	; 63
 21c:	0f 92       	push	r0
 21e:	00 90 5b 00 	lds	r0, 0x005B
 222:	0f 92       	push	r0
 224:	11 24       	eor	r1, r1
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
 232:	df 93       	push	r29
 234:	cf 93       	push	r28
 236:	0f 92       	push	r0
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
	//считанный байт
	unsigned char byte;

	//читаем байт
	byte = UDR1;
 23c:	ec e9       	ldi	r30, 0x9C	; 156
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	89 83       	std	Y+1, r24	; 0x01
	//эхо через узел
	UDR1 = byte;
 244:	ec e9       	ldi	r30, 0x9C	; 156
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	89 81       	ldd	r24, Y+1	; 0x01
 24a:	80 83       	st	Z, r24

	//если нажата клавиша enter, то ввод команды завершен
	if (byte == 0x0d)
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	8d 30       	cpi	r24, 0x0D	; 13
 250:	21 f4       	brne	.+8      	; 0x25a <__vector_30+0x44>
	{
		arriveCom = 1;
 252:	81 e0       	ldi	r24, 0x01	; 1
 254:	80 93 68 01 	sts	0x0168, r24
 258:	16 c0       	rjmp	.+44     	; 0x286 <__vector_30+0x70>
	}
	else
	{
		//запоминаем принятый байт в буфере
		if ( i_buf < mesLen )
 25a:	80 91 6b 01 	lds	r24, 0x016B
 25e:	90 91 6c 01 	lds	r25, 0x016C
 262:	88 32       	cpi	r24, 0x28	; 40
 264:	91 05       	cpc	r25, r1
 266:	78 f4       	brcc	.+30     	; 0x286 <__vector_30+0x70>
		{
			buf[i_buf++] = byte;	
 268:	20 91 6b 01 	lds	r18, 0x016B
 26c:	30 91 6c 01 	lds	r19, 0x016C
 270:	f9 01       	movw	r30, r18
 272:	e7 56       	subi	r30, 0x67	; 103
 274:	fe 4f       	sbci	r31, 0xFE	; 254
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	80 83       	st	Z, r24
 27a:	c9 01       	movw	r24, r18
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 6c 01 	sts	0x016C, r25
 282:	80 93 6b 01 	sts	0x016B, r24
		}
	}
}
 286:	0f 90       	pop	r0
 288:	cf 91       	pop	r28
 28a:	df 91       	pop	r29
 28c:	ff 91       	pop	r31
 28e:	ef 91       	pop	r30
 290:	9f 91       	pop	r25
 292:	8f 91       	pop	r24
 294:	3f 91       	pop	r19
 296:	2f 91       	pop	r18
 298:	0f 90       	pop	r0
 29a:	00 92 5b 00 	sts	0x005B, r0
 29e:	0f 90       	pop	r0
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	0f 90       	pop	r0
 2a4:	1f 90       	pop	r1
 2a6:	18 95       	reti

000002a8 <__vector_31>:

//прерываение по опустошению буффера USART
ISR (USART1_UDRE_vect)
{
 2a8:	1f 92       	push	r1
 2aa:	0f 92       	push	r0
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	0f 92       	push	r0
 2b0:	00 90 5b 00 	lds	r0, 0x005B
 2b4:	0f 92       	push	r0
 2b6:	11 24       	eor	r1, r1
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
 2c4:	df 93       	push	r29
 2c6:	cf 93       	push	r28
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
	i_mes++;			
 2cc:	80 91 6d 01 	lds	r24, 0x016D
 2d0:	90 91 6e 01 	lds	r25, 0x016E
 2d4:	01 96       	adiw	r24, 0x01	; 1
 2d6:	90 93 6e 01 	sts	0x016E, r25
 2da:	80 93 6d 01 	sts	0x016D, r24
 
 	//вывели весь буфер?
	if( message[i_mes] == '\0' )
 2de:	80 91 6d 01 	lds	r24, 0x016D
 2e2:	90 91 6e 01 	lds	r25, 0x016E
 2e6:	fc 01       	movw	r30, r24
 2e8:	ef 58       	subi	r30, 0x8F	; 143
 2ea:	fe 4f       	sbci	r31, 0xFE	; 254
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	41 f4       	brne	.+16     	; 0x302 <__vector_31+0x5a>
	{ 
		// запрещаем прерывание по опустошению - передача закончена
		UCSR1B &=~(1<<UDRIE1);
 2f2:	aa e9       	ldi	r26, 0x9A	; 154
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	ea e9       	ldi	r30, 0x9A	; 154
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	8f 7d       	andi	r24, 0xDF	; 223
 2fe:	8c 93       	st	X, r24
 300:	0b c0       	rjmp	.+22     	; 0x318 <__vector_31+0x70>
	}
	else 
	{
		// берем данные из буффера.
		UDR1 = message[i_mes];
 302:	ac e9       	ldi	r26, 0x9C	; 156
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	80 91 6d 01 	lds	r24, 0x016D
 30a:	90 91 6e 01 	lds	r25, 0x016E
 30e:	fc 01       	movw	r30, r24
 310:	ef 58       	subi	r30, 0x8F	; 143
 312:	fe 4f       	sbci	r31, 0xFE	; 254
 314:	80 81       	ld	r24, Z
 316:	8c 93       	st	X, r24
	}
}
 318:	cf 91       	pop	r28
 31a:	df 91       	pop	r29
 31c:	ff 91       	pop	r31
 31e:	ef 91       	pop	r30
 320:	bf 91       	pop	r27
 322:	af 91       	pop	r26
 324:	9f 91       	pop	r25
 326:	8f 91       	pop	r24
 328:	0f 90       	pop	r0
 32a:	00 92 5b 00 	sts	0x005B, r0
 32e:	0f 90       	pop	r0
 330:	0f be       	out	0x3f, r0	; 63
 332:	0f 90       	pop	r0
 334:	1f 90       	pop	r1
 336:	18 95       	reti

00000338 <__vector_16>:


//прерывание по переполнению таймера
ISR(TIMER0_OVF_vect)
{
 338:	1f 92       	push	r1
 33a:	0f 92       	push	r0
 33c:	0f b6       	in	r0, 0x3f	; 63
 33e:	0f 92       	push	r0
 340:	11 24       	eor	r1, r1
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	df 93       	push	r29
 348:	cf 93       	push	r28
 34a:	cd b7       	in	r28, 0x3d	; 61
 34c:	de b7       	in	r29, 0x3e	; 62
	tcnt--;
 34e:	80 91 02 01 	lds	r24, 0x0102
 352:	90 91 03 01 	lds	r25, 0x0103
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	90 93 03 01 	sts	0x0103, r25
 35c:	80 93 02 01 	sts	0x0102, r24
	if (tcnt == 0)
 360:	80 91 02 01 	lds	r24, 0x0102
 364:	90 91 03 01 	lds	r25, 0x0103
 368:	00 97       	sbiw	r24, 0x00	; 0
 36a:	49 f4       	brne	.+18     	; 0x37e <__vector_16+0x46>
	{
		//поднимаем флаг истечения 2-х секундного интервала
		timeFlag = 1;
 36c:	81 e0       	ldi	r24, 0x01	; 1
 36e:	80 93 00 01 	sts	0x0100, r24
		//вновь увеличиваем счетчик для замера следующих 2-х секунд
		tcnt = 10;
 372:	8a e0       	ldi	r24, 0x0A	; 10
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	90 93 03 01 	sts	0x0103, r25
 37a:	80 93 02 01 	sts	0x0102, r24
	}
}
 37e:	cf 91       	pop	r28
 380:	df 91       	pop	r29
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <main>:


int main(void) 
{
 390:	df 93       	push	r29
 392:	cf 93       	push	r28
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
 398:	cb 50       	subi	r28, 0x0B	; 11
 39a:	d1 40       	sbci	r29, 0x01	; 1
 39c:	0f b6       	in	r0, 0x3f	; 63
 39e:	f8 94       	cli
 3a0:	de bf       	out	0x3e, r29	; 62
 3a2:	0f be       	out	0x3f, r0	; 63
 3a4:	cd bf       	out	0x3d, r28	; 61

	//служебные переменные
	//счетчики для циклов 
	int i, j, k = 0, n = 0;
 3a6:	1d 82       	std	Y+5, r1	; 0x05
 3a8:	1c 82       	std	Y+4, r1	; 0x04
 3aa:	1b 82       	std	Y+3, r1	; 0x03
 3ac:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char value;


	//настраиваем оборудование с которым будем работать 
	//контакты 1,2,3 порта Е для вывода
	DDRE = (1 << PE1) | (1 << PE2) | (1 << PE3);
 3ae:	e2 e2       	ldi	r30, 0x22	; 34
 3b0:	f0 e0       	ldi	r31, 0x00	; 0
 3b2:	8e e0       	ldi	r24, 0x0E	; 14
 3b4:	80 83       	st	Z, r24
	//контакты 4,6 порта B для ввода
	//(кнопки)
	DDRB = (0<<PB5) | (0<<PB6);
 3b6:	e7 e3       	ldi	r30, 0x37	; 55
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
 3ba:	10 82       	st	Z, r1
	//подтягивающие резисторы для порта B
	PORTB = (0<<PB5) | (0<<PB6);
 3bc:	e8 e3       	ldi	r30, 0x38	; 56
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	10 82       	st	Z, r1

	//конфигурируем таймер
	TCCR0 = 0b00000111;
 3c2:	e3 e5       	ldi	r30, 0x53	; 83
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	87 e0       	ldi	r24, 0x07	; 7
 3c8:	80 83       	st	Z, r24
	TIMSK = (1 << TOIE0);
 3ca:	e7 e5       	ldi	r30, 0x57	; 87
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	80 83       	st	Z, r24

	//настраиваем уарт на прием/передачу данных
	//устанавливаем скорость передачи
	UBRR1L = LO(bauddivider);
 3d2:	e9 e9       	ldi	r30, 0x99	; 153
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	83 e3       	ldi	r24, 0x33	; 51
 3d8:	80 83       	st	Z, r24
	UBRR1H = HI(bauddivider);
 3da:	e8 e9       	ldi	r30, 0x98	; 152
 3dc:	f0 e0       	ldi	r31, 0x00	; 0
 3de:	10 82       	st	Z, r1
	//регистр статуса уарт
	UCSR1A = 0;
 3e0:	eb e9       	ldi	r30, 0x9B	; 155
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	10 82       	st	Z, r1
	//разрешаем работу передатчика и приемника
	//прерывания по завершению приема
	//и запрещаем прерывание по завершению передачи
	UCSR1B = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE1) | (0 << TXCIE1);
 3e6:	ea e9       	ldi	r30, 0x9A	; 154
 3e8:	f0 e0       	ldi	r31, 0x00	; 0
 3ea:	88 e9       	ldi	r24, 0x98	; 152
 3ec:	80 83       	st	Z, r24
	//асинхронный режим последовательной связи
	//формат данных 8 бит 1 стоп-бит
	UCSR1C = (0<<UMSEL1)|(1<<USBS1)|(1<<UCSZ10)|(1<<UCSZ11);
 3ee:	ed e9       	ldi	r30, 0x9D	; 157
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	8e e0       	ldi	r24, 0x0E	; 14
 3f4:	80 83       	st	Z, r24

	//разрешаем прерывания глобально
	sei();
 3f6:	78 94       	sei

	//настройка режима сна
	set_sleep_mode ( SLEEP_MODE_IDLE );
 3f8:	a5 e5       	ldi	r26, 0x55	; 85
 3fa:	b0 e0       	ldi	r27, 0x00	; 0
 3fc:	e5 e5       	ldi	r30, 0x55	; 85
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	83 7e       	andi	r24, 0xE3	; 227
 404:	8c 93       	st	X, r24


	//создадим в памяти массив чисел для проверки правильности работы программы
	unsigned char data[256];
	//заполним его числами от 0 до 255
	for (i = 0; i < 256; i++)
 406:	19 86       	std	Y+9, r1	; 0x09
 408:	18 86       	std	Y+8, r1	; 0x08
 40a:	0e c0       	rjmp	.+28     	; 0x428 <main+0x98>
	{
		data[i] = i;
 40c:	28 85       	ldd	r18, Y+8	; 0x08
 40e:	39 85       	ldd	r19, Y+9	; 0x09
 410:	48 85       	ldd	r20, Y+8	; 0x08
 412:	ce 01       	movw	r24, r28
 414:	0a 96       	adiw	r24, 0x0a	; 10
 416:	fc 01       	movw	r30, r24
 418:	e2 0f       	add	r30, r18
 41a:	f3 1f       	adc	r31, r19
 41c:	40 83       	st	Z, r20


	//создадим в памяти массив чисел для проверки правильности работы программы
	unsigned char data[256];
	//заполним его числами от 0 до 255
	for (i = 0; i < 256; i++)
 41e:	88 85       	ldd	r24, Y+8	; 0x08
 420:	99 85       	ldd	r25, Y+9	; 0x09
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	99 87       	std	Y+9, r25	; 0x09
 426:	88 87       	std	Y+8, r24	; 0x08
 428:	88 85       	ldd	r24, Y+8	; 0x08
 42a:	99 85       	ldd	r25, Y+9	; 0x09
 42c:	8f 3f       	cpi	r24, 0xFF	; 255
 42e:	91 05       	cpc	r25, r1
 430:	69 f3       	breq	.-38     	; 0x40c <main+0x7c>
 432:	64 f3       	brlt	.-40     	; 0x40c <main+0x7c>
	{
		data[i] = i;
	}
	//первоначально ссылаемся на начало этого массива
	RAMPointer = data;
 434:	ce 01       	movw	r24, r28
 436:	0a 96       	adiw	r24, 0x0a	; 10
 438:	90 93 70 01 	sts	0x0170, r25
 43c:	80 93 6f 01 	sts	0x016F, r24

	//главный цикл программы
	for (;;)
	{
		//получаем значение из памяти
		value = *RAMPointer;
 440:	e0 91 6f 01 	lds	r30, 0x016F
 444:	f0 91 70 01 	lds	r31, 0x0170
 448:	80 81       	ld	r24, Z
 44a:	89 83       	std	Y+1, r24	; 0x01

		if ( keyFlag )
 44c:	80 91 69 01 	lds	r24, 0x0169
 450:	88 23       	and	r24, r24
 452:	11 f0       	breq	.+4      	; 0x458 <main+0xc8>
		{
			//сканировать клавиатуру
			scanKey();
 454:	0e 94 89 03 	call	0x712	; 0x712 <scanKey>
		}
		//если слово еще не отсылалось через уарт
		if ( notSend )
 458:	80 91 6a 01 	lds	r24, 0x016A
 45c:	88 23       	and	r24, r24
 45e:	29 f0       	breq	.+10     	; 0x46a <main+0xda>
		{
			//отправляем на ПК
			sendByte(value);
 460:	89 81       	ldd	r24, Y+1	; 0x01
 462:	0e 94 67 00 	call	0xce	; 0xce <sendByte>
			notSend = 0;
 466:	10 92 6a 01 	sts	0x016A, r1
		}
		
		if ( notSend == 0 )
 46a:	80 91 6a 01 	lds	r24, 0x016A
 46e:	88 23       	and	r24, r24
 470:	09 f0       	breq	.+2      	; 0x474 <main+0xe4>
 472:	b0 c0       	rjmp	.+352    	; 0x5d4 <main+0x244>
		{
			//если прошло 6 секунд
			if ( n == 2 )
 474:	8a 81       	ldd	r24, Y+2	; 0x02
 476:	9b 81       	ldd	r25, Y+3	; 0x03
 478:	82 30       	cpi	r24, 0x02	; 2
 47a:	91 05       	cpc	r25, r1
 47c:	39 f4       	brne	.+14     	; 0x48c <main+0xfc>
			{
				nextAdr();
 47e:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <nextAdr>
				n = 0;
 482:	1b 82       	std	Y+3, r1	; 0x03
 484:	1a 82       	std	Y+2, r1	; 0x02
				notSend = 1;
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	80 93 6a 01 	sts	0x016A, r24
			}
			//считаем сколько прождали
			if ( timeFlag )
 48c:	80 91 00 01 	lds	r24, 0x0100
 490:	88 23       	and	r24, r24
 492:	09 f4       	brne	.+2      	; 0x496 <main+0x106>
 494:	9f c0       	rjmp	.+318    	; 0x5d4 <main+0x244>
			{
				if ( lightFlag )
 496:	80 91 01 01 	lds	r24, 0x0101
 49a:	88 23       	and	r24, r24
 49c:	09 f4       	brne	.+2      	; 0x4a0 <main+0x110>
 49e:	93 c0       	rjmp	.+294    	; 0x5c6 <main+0x236>
				{
				//отображать слова на индикаторах
					//какую тройку выводить на индикаторы
					switch (k)
 4a0:	8c 81       	ldd	r24, Y+4	; 0x04
 4a2:	9d 81       	ldd	r25, Y+5	; 0x05
 4a4:	c6 5f       	subi	r28, 0xF6	; 246
 4a6:	de 4f       	sbci	r29, 0xFE	; 254
 4a8:	99 83       	std	Y+1, r25	; 0x01
 4aa:	88 83       	st	Y, r24
 4ac:	ca 50       	subi	r28, 0x0A	; 10
 4ae:	d1 40       	sbci	r29, 0x01	; 1
 4b0:	c6 5f       	subi	r28, 0xF6	; 246
 4b2:	de 4f       	sbci	r29, 0xFE	; 254
 4b4:	88 81       	ld	r24, Y
 4b6:	99 81       	ldd	r25, Y+1	; 0x01
 4b8:	ca 50       	subi	r28, 0x0A	; 10
 4ba:	d1 40       	sbci	r29, 0x01	; 1
 4bc:	81 30       	cpi	r24, 0x01	; 1
 4be:	91 05       	cpc	r25, r1
 4c0:	c9 f1       	breq	.+114    	; 0x534 <main+0x1a4>
 4c2:	c6 5f       	subi	r28, 0xF6	; 246
 4c4:	de 4f       	sbci	r29, 0xFE	; 254
 4c6:	88 81       	ld	r24, Y
 4c8:	99 81       	ldd	r25, Y+1	; 0x01
 4ca:	ca 50       	subi	r28, 0x0A	; 10
 4cc:	d1 40       	sbci	r29, 0x01	; 1
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	91 05       	cpc	r25, r1
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <main+0x146>
 4d4:	55 c0       	rjmp	.+170    	; 0x580 <main+0x1f0>
 4d6:	c6 5f       	subi	r28, 0xF6	; 246
 4d8:	de 4f       	sbci	r29, 0xFE	; 254
 4da:	88 81       	ld	r24, Y
 4dc:	99 81       	ldd	r25, Y+1	; 0x01
 4de:	ca 50       	subi	r28, 0x0A	; 10
 4e0:	d1 40       	sbci	r29, 0x01	; 1
 4e2:	00 97       	sbiw	r24, 0x00	; 0
 4e4:	09 f0       	breq	.+2      	; 0x4e8 <main+0x158>
 4e6:	6f c0       	rjmp	.+222    	; 0x5c6 <main+0x236>
					{
						case 0:
							//выводим первые 3 бита
							PORTE = (value & 0b10000000) << PE1 | (value & 0b01000000) << PE2 
 4e8:	e3 e2       	ldi	r30, 0x23	; 35
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	88 2f       	mov	r24, r24
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	80 78       	andi	r24, 0x80	; 128
 4f4:	90 70       	andi	r25, 0x00	; 0
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	28 2f       	mov	r18, r24
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	88 2f       	mov	r24, r24
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	80 74       	andi	r24, 0x40	; 64
 504:	90 70       	andi	r25, 0x00	; 0
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	28 2b       	or	r18, r24
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	88 2f       	mov	r24, r24
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	80 72       	andi	r24, 0x20	; 32
 518:	90 70       	andi	r25, 0x00	; 0
 51a:	88 0f       	add	r24, r24
 51c:	99 1f       	adc	r25, r25
 51e:	88 0f       	add	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	82 2b       	or	r24, r18
 528:	80 83       	st	Z, r24
										| (value & 0b00100000) << PE3;
							k = 1;
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	9d 83       	std	Y+5, r25	; 0x05
 530:	8c 83       	std	Y+4, r24	; 0x04
 532:	49 c0       	rjmp	.+146    	; 0x5c6 <main+0x236>
							break;
						case 1:
							//выводим вторые 3 бита
							PORTE = (value & 0b00010000) << PE1 | (value & 0b00001000) << PE2 
 534:	e3 e2       	ldi	r30, 0x23	; 35
 536:	f0 e0       	ldi	r31, 0x00	; 0
 538:	89 81       	ldd	r24, Y+1	; 0x01
 53a:	88 2f       	mov	r24, r24
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	80 71       	andi	r24, 0x10	; 16
 540:	90 70       	andi	r25, 0x00	; 0
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	28 2f       	mov	r18, r24
 548:	89 81       	ldd	r24, Y+1	; 0x01
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	88 70       	andi	r24, 0x08	; 8
 550:	90 70       	andi	r25, 0x00	; 0
 552:	88 0f       	add	r24, r24
 554:	99 1f       	adc	r25, r25
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	28 2b       	or	r18, r24
 55c:	89 81       	ldd	r24, Y+1	; 0x01
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	84 70       	andi	r24, 0x04	; 4
 564:	90 70       	andi	r25, 0x00	; 0
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	88 0f       	add	r24, r24
 56c:	99 1f       	adc	r25, r25
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	82 2b       	or	r24, r18
 574:	80 83       	st	Z, r24
										| (value & 0b00000100) << PE3;
							k = 2;
 576:	82 e0       	ldi	r24, 0x02	; 2
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	9d 83       	std	Y+5, r25	; 0x05
 57c:	8c 83       	std	Y+4, r24	; 0x04
 57e:	23 c0       	rjmp	.+70     	; 0x5c6 <main+0x236>
							break;
						case 2:
							//выводим последние 2 бита и бит четности
							PORTE = (value & 0b00000010) << PE1 | (value & 0b00000001) << PE2 
 580:	e3 e2       	ldi	r30, 0x23	; 35
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	89 81       	ldd	r24, Y+1	; 0x01
 586:	88 2f       	mov	r24, r24
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	82 70       	andi	r24, 0x02	; 2
 58c:	90 70       	andi	r25, 0x00	; 0
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	28 2f       	mov	r18, r24
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	88 2f       	mov	r24, r24
 598:	90 e0       	ldi	r25, 0x00	; 0
 59a:	81 70       	andi	r24, 0x01	; 1
 59c:	90 70       	andi	r25, 0x00	; 0
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	28 2b       	or	r18, r24
 5a8:	89 81       	ldd	r24, Y+1	; 0x01
 5aa:	88 2f       	mov	r24, r24
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	80 72       	andi	r24, 0x20	; 32
 5b0:	90 70       	andi	r25, 0x00	; 0
 5b2:	88 0f       	add	r24, r24
 5b4:	99 1f       	adc	r25, r25
 5b6:	88 0f       	add	r24, r24
 5b8:	99 1f       	adc	r25, r25
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	82 2b       	or	r24, r18
 5c0:	80 83       	st	Z, r24
										| (value & 0b00100000) << PE3;
							k = 0;
 5c2:	1d 82       	std	Y+5, r1	; 0x05
 5c4:	1c 82       	std	Y+4, r1	; 0x04
							break;
					}
				}
				timeFlag = 0;
 5c6:	10 92 00 01 	sts	0x0100, r1
				n++;
 5ca:	8a 81       	ldd	r24, Y+2	; 0x02
 5cc:	9b 81       	ldd	r25, Y+3	; 0x03
 5ce:	01 96       	adiw	r24, 0x01	; 1
 5d0:	9b 83       	std	Y+3, r25	; 0x03
 5d2:	8a 83       	std	Y+2, r24	; 0x02
			}
		}

		//если принята команда по уарт
		if ( arriveCom )
 5d4:	80 91 68 01 	lds	r24, 0x0168
 5d8:	88 23       	and	r24, r24
 5da:	21 f0       	breq	.+8      	; 0x5e4 <main+0x254>
		{
			//сбрасываем флаг
			arriveCom = 0;
 5dc:	10 92 68 01 	sts	0x0168, r1
			//обрабатываем команду
			exeCom();
 5e0:	0e 94 02 03 	call	0x604	; 0x604 <exeCom>
		}
		//после того как все действия выполнены засыпаем
		sleep_mode();
 5e4:	a5 e5       	ldi	r26, 0x55	; 85
 5e6:	b0 e0       	ldi	r27, 0x00	; 0
 5e8:	e5 e5       	ldi	r30, 0x55	; 85
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	80 62       	ori	r24, 0x20	; 32
 5f0:	8c 93       	st	X, r24
 5f2:	88 95       	sleep
 5f4:	a5 e5       	ldi	r26, 0x55	; 85
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e5 e5       	ldi	r30, 0x55	; 85
 5fa:	f0 e0       	ldi	r31, 0x00	; 0
 5fc:	80 81       	ld	r24, Z
 5fe:	8f 7d       	andi	r24, 0xDF	; 223
 600:	8c 93       	st	X, r24
 602:	1e cf       	rjmp	.-452    	; 0x440 <main+0xb0>

00000604 <exeCom>:
}



void exeCom()
{
 604:	df 93       	push	r29
 606:	cf 93       	push	r28
 608:	00 d0       	rcall	.+0      	; 0x60a <exeCom+0x6>
 60a:	00 d0       	rcall	.+0      	; 0x60c <exeCom+0x8>
 60c:	00 d0       	rcall	.+0      	; 0x60e <exeCom+0xa>
 60e:	cd b7       	in	r28, 0x3d	; 61
 610:	de b7       	in	r29, 0x3e	; 62
	char bufer[4];
	unsigned char i, adr;
	if ( strncmp(buf, "key_on", 6) == 0 )
 612:	89 e9       	ldi	r24, 0x99	; 153
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	2e e1       	ldi	r18, 0x1E	; 30
 618:	31 e0       	ldi	r19, 0x01	; 1
 61a:	b9 01       	movw	r22, r18
 61c:	46 e0       	ldi	r20, 0x06	; 6
 61e:	50 e0       	ldi	r21, 0x00	; 0
 620:	0e 94 d6 03 	call	0x7ac	; 0x7ac <strncmp>
 624:	00 97       	sbiw	r24, 0x00	; 0
 626:	21 f4       	brne	.+8      	; 0x630 <exeCom+0x2c>
	{
		keyFlag = 1;
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	80 93 69 01 	sts	0x0169, r24
 62e:	68 c0       	rjmp	.+208    	; 0x700 <exeCom+0xfc>
	}
	else if ( strncmp(buf, "key_off", 7) == 0)
 630:	89 e9       	ldi	r24, 0x99	; 153
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	25 e2       	ldi	r18, 0x25	; 37
 636:	31 e0       	ldi	r19, 0x01	; 1
 638:	b9 01       	movw	r22, r18
 63a:	47 e0       	ldi	r20, 0x07	; 7
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <strncmp>
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	19 f4       	brne	.+6      	; 0x64c <exeCom+0x48>
	{
		keyFlag = 0;
 646:	10 92 69 01 	sts	0x0169, r1
 64a:	5a c0       	rjmp	.+180    	; 0x700 <exeCom+0xfc>
	}
	else if ( strncmp(buf, "light_on", 8) == 0)
 64c:	89 e9       	ldi	r24, 0x99	; 153
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	2d e2       	ldi	r18, 0x2D	; 45
 652:	31 e0       	ldi	r19, 0x01	; 1
 654:	b9 01       	movw	r22, r18
 656:	48 e0       	ldi	r20, 0x08	; 8
 658:	50 e0       	ldi	r21, 0x00	; 0
 65a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <strncmp>
 65e:	00 97       	sbiw	r24, 0x00	; 0
 660:	21 f4       	brne	.+8      	; 0x66a <exeCom+0x66>
	{
		lightFlag = 1;
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	80 93 01 01 	sts	0x0101, r24
 668:	4b c0       	rjmp	.+150    	; 0x700 <exeCom+0xfc>
	}
	else if (strncmp(buf, "light_off", 9) == 0)
 66a:	89 e9       	ldi	r24, 0x99	; 153
 66c:	91 e0       	ldi	r25, 0x01	; 1
 66e:	26 e3       	ldi	r18, 0x36	; 54
 670:	31 e0       	ldi	r19, 0x01	; 1
 672:	b9 01       	movw	r22, r18
 674:	49 e0       	ldi	r20, 0x09	; 9
 676:	50 e0       	ldi	r21, 0x00	; 0
 678:	0e 94 d6 03 	call	0x7ac	; 0x7ac <strncmp>
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	19 f4       	brne	.+6      	; 0x686 <exeCom+0x82>
	{
		lightFlag = 0;
 680:	10 92 01 01 	sts	0x0101, r1
 684:	3d c0       	rjmp	.+122    	; 0x700 <exeCom+0xfc>
	}
	else if (strncmp(buf, "get", 3) == 0)
 686:	89 e9       	ldi	r24, 0x99	; 153
 688:	91 e0       	ldi	r25, 0x01	; 1
 68a:	20 e4       	ldi	r18, 0x40	; 64
 68c:	31 e0       	ldi	r19, 0x01	; 1
 68e:	b9 01       	movw	r22, r18
 690:	43 e0       	ldi	r20, 0x03	; 3
 692:	50 e0       	ldi	r21, 0x00	; 0
 694:	0e 94 d6 03 	call	0x7ac	; 0x7ac <strncmp>
 698:	00 97       	sbiw	r24, 0x00	; 0
 69a:	71 f5       	brne	.+92     	; 0x6f8 <exeCom+0xf4>
	{
		//проверяем корректность адреса
		for (i = 0; i < 4; i++)
 69c:	1a 82       	std	Y+2, r1	; 0x02
 69e:	14 c0       	rjmp	.+40     	; 0x6c8 <exeCom+0xc4>
		{
			bufer[i] = buf[i+4];
 6a0:	8a 81       	ldd	r24, Y+2	; 0x02
 6a2:	48 2f       	mov	r20, r24
 6a4:	50 e0       	ldi	r21, 0x00	; 0
 6a6:	8a 81       	ldd	r24, Y+2	; 0x02
 6a8:	88 2f       	mov	r24, r24
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	04 96       	adiw	r24, 0x04	; 4
 6ae:	fc 01       	movw	r30, r24
 6b0:	e7 56       	subi	r30, 0x67	; 103
 6b2:	fe 4f       	sbci	r31, 0xFE	; 254
 6b4:	20 81       	ld	r18, Z
 6b6:	ce 01       	movw	r24, r28
 6b8:	03 96       	adiw	r24, 0x03	; 3
 6ba:	fc 01       	movw	r30, r24
 6bc:	e4 0f       	add	r30, r20
 6be:	f5 1f       	adc	r31, r21
 6c0:	20 83       	st	Z, r18
		lightFlag = 0;
	}
	else if (strncmp(buf, "get", 3) == 0)
	{
		//проверяем корректность адреса
		for (i = 0; i < 4; i++)
 6c2:	8a 81       	ldd	r24, Y+2	; 0x02
 6c4:	8f 5f       	subi	r24, 0xFF	; 255
 6c6:	8a 83       	std	Y+2, r24	; 0x02
 6c8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ca:	84 30       	cpi	r24, 0x04	; 4
 6cc:	48 f3       	brcs	.-46     	; 0x6a0 <exeCom+0x9c>
		{
			bufer[i] = buf[i+4];
		}
		adr = atoi(bufer);
 6ce:	ce 01       	movw	r24, r28
 6d0:	03 96       	adiw	r24, 0x03	; 3
 6d2:	0e 94 b1 03 	call	0x762	; 0x762 <atoi>
 6d6:	89 83       	std	Y+1, r24	; 0x01
		if ( adr > 0 && adr < 4096)
 6d8:	89 81       	ldd	r24, Y+1	; 0x01
 6da:	88 23       	and	r24, r24
 6dc:	41 f0       	breq	.+16     	; 0x6ee <exeCom+0xea>
		{
			RAMPointer = adr;
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	88 2f       	mov	r24, r24
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	90 93 70 01 	sts	0x0170, r25
 6e8:	80 93 6f 01 	sts	0x016F, r24
 6ec:	09 c0       	rjmp	.+18     	; 0x700 <exeCom+0xfc>
		}
		else 
		{
			sendStr("bad arddress\n\r");
 6ee:	84 e4       	ldi	r24, 0x44	; 68
 6f0:	91 e0       	ldi	r25, 0x01	; 1
 6f2:	0e 94 af 00 	call	0x15e	; 0x15e <sendStr>
 6f6:	04 c0       	rjmp	.+8      	; 0x700 <exeCom+0xfc>
		}
	}
	else 
	{
		sendStr("undefined command\n\r");
 6f8:	83 e5       	ldi	r24, 0x53	; 83
 6fa:	91 e0       	ldi	r25, 0x01	; 1
 6fc:	0e 94 af 00 	call	0x15e	; 0x15e <sendStr>

	//вычисляем контрольную сумму
	//отправляем на уарт вычисленную сумму
	
	return;
}
 700:	26 96       	adiw	r28, 0x06	; 6
 702:	0f b6       	in	r0, 0x3f	; 63
 704:	f8 94       	cli
 706:	de bf       	out	0x3e, r29	; 62
 708:	0f be       	out	0x3f, r0	; 63
 70a:	cd bf       	out	0x3d, r28	; 61
 70c:	cf 91       	pop	r28
 70e:	df 91       	pop	r29
 710:	08 95       	ret

00000712 <scanKey>:


void scanKey()
{
 712:	df 93       	push	r29
 714:	cf 93       	push	r28
 716:	00 d0       	rcall	.+0      	; 0x718 <scanKey+0x6>
 718:	cd b7       	in	r28, 0x3d	; 61
 71a:	de b7       	in	r29, 0x3e	; 62
	//считываем значение из порта
	int byte = PINB;
 71c:	e6 e3       	ldi	r30, 0x36	; 54
 71e:	f0 e0       	ldi	r31, 0x00	; 0
 720:	80 81       	ld	r24, Z
 722:	88 2f       	mov	r24, r24
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	9a 83       	std	Y+2, r25	; 0x02
 728:	89 83       	std	Y+1, r24	; 0x01

	if (byte & 0b00100000)
 72a:	89 81       	ldd	r24, Y+1	; 0x01
 72c:	9a 81       	ldd	r25, Y+2	; 0x02
 72e:	80 72       	andi	r24, 0x20	; 32
 730:	90 70       	andi	r25, 0x00	; 0
 732:	00 97       	sbiw	r24, 0x00	; 0
 734:	31 f0       	breq	.+12     	; 0x742 <scanKey+0x30>
	{
		//если нажата кнопка на линии 5 порта В
		nextAdr();
 736:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <nextAdr>
		notSend = 1;
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	80 93 6a 01 	sts	0x016A, r24
 740:	0b c0       	rjmp	.+22     	; 0x758 <scanKey+0x46>
	}
	else if (byte & 0b01000000)
 742:	89 81       	ldd	r24, Y+1	; 0x01
 744:	9a 81       	ldd	r25, Y+2	; 0x02
 746:	80 74       	andi	r24, 0x40	; 64
 748:	90 70       	andi	r25, 0x00	; 0
 74a:	00 97       	sbiw	r24, 0x00	; 0
 74c:	29 f0       	breq	.+10     	; 0x758 <scanKey+0x46>
	{
		//если нажата кнопка на линии 6 порта В
		prevAdr();
 74e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <prevAdr>
		notSend = 1;
 752:	81 e0       	ldi	r24, 0x01	; 1
 754:	80 93 6a 01 	sts	0x016A, r24
	}
}
 758:	0f 90       	pop	r0
 75a:	0f 90       	pop	r0
 75c:	cf 91       	pop	r28
 75e:	df 91       	pop	r29
 760:	08 95       	ret

00000762 <atoi>:
 762:	fc 01       	movw	r30, r24
 764:	88 27       	eor	r24, r24
 766:	99 27       	eor	r25, r25
 768:	e8 94       	clt
 76a:	21 91       	ld	r18, Z+
 76c:	20 32       	cpi	r18, 0x20	; 32
 76e:	e9 f3       	breq	.-6      	; 0x76a <atoi+0x8>
 770:	29 30       	cpi	r18, 0x09	; 9
 772:	10 f0       	brcs	.+4      	; 0x778 <atoi+0x16>
 774:	2e 30       	cpi	r18, 0x0E	; 14
 776:	c8 f3       	brcs	.-14     	; 0x76a <atoi+0x8>
 778:	2b 32       	cpi	r18, 0x2B	; 43
 77a:	41 f0       	breq	.+16     	; 0x78c <atoi+0x2a>
 77c:	2d 32       	cpi	r18, 0x2D	; 45
 77e:	39 f4       	brne	.+14     	; 0x78e <atoi+0x2c>
 780:	68 94       	set
 782:	04 c0       	rjmp	.+8      	; 0x78c <atoi+0x2a>
 784:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__mulhi_const_10>
 788:	82 0f       	add	r24, r18
 78a:	91 1d       	adc	r25, r1
 78c:	21 91       	ld	r18, Z+
 78e:	20 53       	subi	r18, 0x30	; 48
 790:	2a 30       	cpi	r18, 0x0A	; 10
 792:	c0 f3       	brcs	.-16     	; 0x784 <atoi+0x22>
 794:	1e f4       	brtc	.+6      	; 0x79c <atoi+0x3a>
 796:	90 95       	com	r25
 798:	81 95       	neg	r24
 79a:	9f 4f       	sbci	r25, 0xFF	; 255
 79c:	08 95       	ret

0000079e <strcpy>:
 79e:	fb 01       	movw	r30, r22
 7a0:	dc 01       	movw	r26, r24
 7a2:	01 90       	ld	r0, Z+
 7a4:	0d 92       	st	X+, r0
 7a6:	00 20       	and	r0, r0
 7a8:	e1 f7       	brne	.-8      	; 0x7a2 <strcpy+0x4>
 7aa:	08 95       	ret

000007ac <strncmp>:
 7ac:	fb 01       	movw	r30, r22
 7ae:	dc 01       	movw	r26, r24
 7b0:	41 50       	subi	r20, 0x01	; 1
 7b2:	50 40       	sbci	r21, 0x00	; 0
 7b4:	30 f0       	brcs	.+12     	; 0x7c2 <strncmp+0x16>
 7b6:	8d 91       	ld	r24, X+
 7b8:	01 90       	ld	r0, Z+
 7ba:	80 19       	sub	r24, r0
 7bc:	19 f4       	brne	.+6      	; 0x7c4 <strncmp+0x18>
 7be:	00 20       	and	r0, r0
 7c0:	b9 f7       	brne	.-18     	; 0x7b0 <strncmp+0x4>
 7c2:	88 1b       	sub	r24, r24
 7c4:	99 0b       	sbc	r25, r25
 7c6:	08 95       	ret

000007c8 <__mulhi_const_10>:
 7c8:	7a e0       	ldi	r23, 0x0A	; 10
 7ca:	97 9f       	mul	r25, r23
 7cc:	90 2d       	mov	r25, r0
 7ce:	87 9f       	mul	r24, r23
 7d0:	80 2d       	mov	r24, r0
 7d2:	91 0d       	add	r25, r1
 7d4:	11 24       	eor	r1, r1
 7d6:	08 95       	ret

000007d8 <sprintf>:
 7d8:	0f 93       	push	r16
 7da:	1f 93       	push	r17
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	cd b7       	in	r28, 0x3d	; 61
 7e2:	de b7       	in	r29, 0x3e	; 62
 7e4:	2e 97       	sbiw	r28, 0x0e	; 14
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	f8 94       	cli
 7ea:	de bf       	out	0x3e, r29	; 62
 7ec:	0f be       	out	0x3f, r0	; 63
 7ee:	cd bf       	out	0x3d, r28	; 61
 7f0:	0d 89       	ldd	r16, Y+21	; 0x15
 7f2:	1e 89       	ldd	r17, Y+22	; 0x16
 7f4:	86 e0       	ldi	r24, 0x06	; 6
 7f6:	8c 83       	std	Y+4, r24	; 0x04
 7f8:	1a 83       	std	Y+2, r17	; 0x02
 7fa:	09 83       	std	Y+1, r16	; 0x01
 7fc:	8f ef       	ldi	r24, 0xFF	; 255
 7fe:	9f e7       	ldi	r25, 0x7F	; 127
 800:	9e 83       	std	Y+6, r25	; 0x06
 802:	8d 83       	std	Y+5, r24	; 0x05
 804:	9e 01       	movw	r18, r28
 806:	27 5e       	subi	r18, 0xE7	; 231
 808:	3f 4f       	sbci	r19, 0xFF	; 255
 80a:	ce 01       	movw	r24, r28
 80c:	01 96       	adiw	r24, 0x01	; 1
 80e:	6f 89       	ldd	r22, Y+23	; 0x17
 810:	78 8d       	ldd	r23, Y+24	; 0x18
 812:	a9 01       	movw	r20, r18
 814:	0e 94 1d 04 	call	0x83a	; 0x83a <vfprintf>
 818:	2f 81       	ldd	r18, Y+7	; 0x07
 81a:	38 85       	ldd	r19, Y+8	; 0x08
 81c:	02 0f       	add	r16, r18
 81e:	13 1f       	adc	r17, r19
 820:	f8 01       	movw	r30, r16
 822:	10 82       	st	Z, r1
 824:	2e 96       	adiw	r28, 0x0e	; 14
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	1f 91       	pop	r17
 836:	0f 91       	pop	r16
 838:	08 95       	ret

0000083a <vfprintf>:
 83a:	2f 92       	push	r2
 83c:	3f 92       	push	r3
 83e:	4f 92       	push	r4
 840:	5f 92       	push	r5
 842:	6f 92       	push	r6
 844:	7f 92       	push	r7
 846:	8f 92       	push	r8
 848:	9f 92       	push	r9
 84a:	af 92       	push	r10
 84c:	bf 92       	push	r11
 84e:	cf 92       	push	r12
 850:	df 92       	push	r13
 852:	ef 92       	push	r14
 854:	ff 92       	push	r15
 856:	0f 93       	push	r16
 858:	1f 93       	push	r17
 85a:	df 93       	push	r29
 85c:	cf 93       	push	r28
 85e:	cd b7       	in	r28, 0x3d	; 61
 860:	de b7       	in	r29, 0x3e	; 62
 862:	2b 97       	sbiw	r28, 0x0b	; 11
 864:	0f b6       	in	r0, 0x3f	; 63
 866:	f8 94       	cli
 868:	de bf       	out	0x3e, r29	; 62
 86a:	0f be       	out	0x3f, r0	; 63
 86c:	cd bf       	out	0x3d, r28	; 61
 86e:	3c 01       	movw	r6, r24
 870:	2b 01       	movw	r4, r22
 872:	5a 01       	movw	r10, r20
 874:	fc 01       	movw	r30, r24
 876:	17 82       	std	Z+7, r1	; 0x07
 878:	16 82       	std	Z+6, r1	; 0x06
 87a:	83 81       	ldd	r24, Z+3	; 0x03
 87c:	81 fd       	sbrc	r24, 1
 87e:	03 c0       	rjmp	.+6      	; 0x886 <vfprintf+0x4c>
 880:	6f ef       	ldi	r22, 0xFF	; 255
 882:	7f ef       	ldi	r23, 0xFF	; 255
 884:	c6 c1       	rjmp	.+908    	; 0xc12 <vfprintf+0x3d8>
 886:	9a e0       	ldi	r25, 0x0A	; 10
 888:	89 2e       	mov	r8, r25
 88a:	1e 01       	movw	r2, r28
 88c:	08 94       	sec
 88e:	21 1c       	adc	r2, r1
 890:	31 1c       	adc	r3, r1
 892:	f3 01       	movw	r30, r6
 894:	23 81       	ldd	r18, Z+3	; 0x03
 896:	f2 01       	movw	r30, r4
 898:	23 fd       	sbrc	r18, 3
 89a:	85 91       	lpm	r24, Z+
 89c:	23 ff       	sbrs	r18, 3
 89e:	81 91       	ld	r24, Z+
 8a0:	2f 01       	movw	r4, r30
 8a2:	88 23       	and	r24, r24
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <vfprintf+0x6e>
 8a6:	b2 c1       	rjmp	.+868    	; 0xc0c <vfprintf+0x3d2>
 8a8:	85 32       	cpi	r24, 0x25	; 37
 8aa:	39 f4       	brne	.+14     	; 0x8ba <vfprintf+0x80>
 8ac:	23 fd       	sbrc	r18, 3
 8ae:	85 91       	lpm	r24, Z+
 8b0:	23 ff       	sbrs	r18, 3
 8b2:	81 91       	ld	r24, Z+
 8b4:	2f 01       	movw	r4, r30
 8b6:	85 32       	cpi	r24, 0x25	; 37
 8b8:	29 f4       	brne	.+10     	; 0x8c4 <vfprintf+0x8a>
 8ba:	90 e0       	ldi	r25, 0x00	; 0
 8bc:	b3 01       	movw	r22, r6
 8be:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 8c2:	e7 cf       	rjmp	.-50     	; 0x892 <vfprintf+0x58>
 8c4:	98 2f       	mov	r25, r24
 8c6:	ff 24       	eor	r15, r15
 8c8:	ee 24       	eor	r14, r14
 8ca:	99 24       	eor	r9, r9
 8cc:	ff e1       	ldi	r31, 0x1F	; 31
 8ce:	ff 15       	cp	r31, r15
 8d0:	d0 f0       	brcs	.+52     	; 0x906 <vfprintf+0xcc>
 8d2:	9b 32       	cpi	r25, 0x2B	; 43
 8d4:	69 f0       	breq	.+26     	; 0x8f0 <vfprintf+0xb6>
 8d6:	9c 32       	cpi	r25, 0x2C	; 44
 8d8:	28 f4       	brcc	.+10     	; 0x8e4 <vfprintf+0xaa>
 8da:	90 32       	cpi	r25, 0x20	; 32
 8dc:	59 f0       	breq	.+22     	; 0x8f4 <vfprintf+0xba>
 8de:	93 32       	cpi	r25, 0x23	; 35
 8e0:	91 f4       	brne	.+36     	; 0x906 <vfprintf+0xcc>
 8e2:	0e c0       	rjmp	.+28     	; 0x900 <vfprintf+0xc6>
 8e4:	9d 32       	cpi	r25, 0x2D	; 45
 8e6:	49 f0       	breq	.+18     	; 0x8fa <vfprintf+0xc0>
 8e8:	90 33       	cpi	r25, 0x30	; 48
 8ea:	69 f4       	brne	.+26     	; 0x906 <vfprintf+0xcc>
 8ec:	41 e0       	ldi	r20, 0x01	; 1
 8ee:	24 c0       	rjmp	.+72     	; 0x938 <vfprintf+0xfe>
 8f0:	52 e0       	ldi	r21, 0x02	; 2
 8f2:	f5 2a       	or	r15, r21
 8f4:	84 e0       	ldi	r24, 0x04	; 4
 8f6:	f8 2a       	or	r15, r24
 8f8:	28 c0       	rjmp	.+80     	; 0x94a <vfprintf+0x110>
 8fa:	98 e0       	ldi	r25, 0x08	; 8
 8fc:	f9 2a       	or	r15, r25
 8fe:	25 c0       	rjmp	.+74     	; 0x94a <vfprintf+0x110>
 900:	e0 e1       	ldi	r30, 0x10	; 16
 902:	fe 2a       	or	r15, r30
 904:	22 c0       	rjmp	.+68     	; 0x94a <vfprintf+0x110>
 906:	f7 fc       	sbrc	r15, 7
 908:	29 c0       	rjmp	.+82     	; 0x95c <vfprintf+0x122>
 90a:	89 2f       	mov	r24, r25
 90c:	80 53       	subi	r24, 0x30	; 48
 90e:	8a 30       	cpi	r24, 0x0A	; 10
 910:	70 f4       	brcc	.+28     	; 0x92e <vfprintf+0xf4>
 912:	f6 fe       	sbrs	r15, 6
 914:	05 c0       	rjmp	.+10     	; 0x920 <vfprintf+0xe6>
 916:	98 9c       	mul	r9, r8
 918:	90 2c       	mov	r9, r0
 91a:	11 24       	eor	r1, r1
 91c:	98 0e       	add	r9, r24
 91e:	15 c0       	rjmp	.+42     	; 0x94a <vfprintf+0x110>
 920:	e8 9c       	mul	r14, r8
 922:	e0 2c       	mov	r14, r0
 924:	11 24       	eor	r1, r1
 926:	e8 0e       	add	r14, r24
 928:	f0 e2       	ldi	r31, 0x20	; 32
 92a:	ff 2a       	or	r15, r31
 92c:	0e c0       	rjmp	.+28     	; 0x94a <vfprintf+0x110>
 92e:	9e 32       	cpi	r25, 0x2E	; 46
 930:	29 f4       	brne	.+10     	; 0x93c <vfprintf+0x102>
 932:	f6 fc       	sbrc	r15, 6
 934:	6b c1       	rjmp	.+726    	; 0xc0c <vfprintf+0x3d2>
 936:	40 e4       	ldi	r20, 0x40	; 64
 938:	f4 2a       	or	r15, r20
 93a:	07 c0       	rjmp	.+14     	; 0x94a <vfprintf+0x110>
 93c:	9c 36       	cpi	r25, 0x6C	; 108
 93e:	19 f4       	brne	.+6      	; 0x946 <vfprintf+0x10c>
 940:	50 e8       	ldi	r21, 0x80	; 128
 942:	f5 2a       	or	r15, r21
 944:	02 c0       	rjmp	.+4      	; 0x94a <vfprintf+0x110>
 946:	98 36       	cpi	r25, 0x68	; 104
 948:	49 f4       	brne	.+18     	; 0x95c <vfprintf+0x122>
 94a:	f2 01       	movw	r30, r4
 94c:	23 fd       	sbrc	r18, 3
 94e:	95 91       	lpm	r25, Z+
 950:	23 ff       	sbrs	r18, 3
 952:	91 91       	ld	r25, Z+
 954:	2f 01       	movw	r4, r30
 956:	99 23       	and	r25, r25
 958:	09 f0       	breq	.+2      	; 0x95c <vfprintf+0x122>
 95a:	b8 cf       	rjmp	.-144    	; 0x8cc <vfprintf+0x92>
 95c:	89 2f       	mov	r24, r25
 95e:	85 54       	subi	r24, 0x45	; 69
 960:	83 30       	cpi	r24, 0x03	; 3
 962:	18 f0       	brcs	.+6      	; 0x96a <vfprintf+0x130>
 964:	80 52       	subi	r24, 0x20	; 32
 966:	83 30       	cpi	r24, 0x03	; 3
 968:	38 f4       	brcc	.+14     	; 0x978 <vfprintf+0x13e>
 96a:	44 e0       	ldi	r20, 0x04	; 4
 96c:	50 e0       	ldi	r21, 0x00	; 0
 96e:	a4 0e       	add	r10, r20
 970:	b5 1e       	adc	r11, r21
 972:	5f e3       	ldi	r21, 0x3F	; 63
 974:	59 83       	std	Y+1, r21	; 0x01
 976:	0f c0       	rjmp	.+30     	; 0x996 <vfprintf+0x15c>
 978:	93 36       	cpi	r25, 0x63	; 99
 97a:	31 f0       	breq	.+12     	; 0x988 <vfprintf+0x14e>
 97c:	93 37       	cpi	r25, 0x73	; 115
 97e:	79 f0       	breq	.+30     	; 0x99e <vfprintf+0x164>
 980:	93 35       	cpi	r25, 0x53	; 83
 982:	09 f0       	breq	.+2      	; 0x986 <vfprintf+0x14c>
 984:	56 c0       	rjmp	.+172    	; 0xa32 <vfprintf+0x1f8>
 986:	20 c0       	rjmp	.+64     	; 0x9c8 <vfprintf+0x18e>
 988:	f5 01       	movw	r30, r10
 98a:	80 81       	ld	r24, Z
 98c:	89 83       	std	Y+1, r24	; 0x01
 98e:	42 e0       	ldi	r20, 0x02	; 2
 990:	50 e0       	ldi	r21, 0x00	; 0
 992:	a4 0e       	add	r10, r20
 994:	b5 1e       	adc	r11, r21
 996:	61 01       	movw	r12, r2
 998:	01 e0       	ldi	r16, 0x01	; 1
 99a:	10 e0       	ldi	r17, 0x00	; 0
 99c:	12 c0       	rjmp	.+36     	; 0x9c2 <vfprintf+0x188>
 99e:	f5 01       	movw	r30, r10
 9a0:	c0 80       	ld	r12, Z
 9a2:	d1 80       	ldd	r13, Z+1	; 0x01
 9a4:	f6 fc       	sbrc	r15, 6
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <vfprintf+0x174>
 9a8:	6f ef       	ldi	r22, 0xFF	; 255
 9aa:	7f ef       	ldi	r23, 0xFF	; 255
 9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <vfprintf+0x178>
 9ae:	69 2d       	mov	r22, r9
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	42 e0       	ldi	r20, 0x02	; 2
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	a4 0e       	add	r10, r20
 9b8:	b5 1e       	adc	r11, r21
 9ba:	c6 01       	movw	r24, r12
 9bc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <strnlen>
 9c0:	8c 01       	movw	r16, r24
 9c2:	5f e7       	ldi	r21, 0x7F	; 127
 9c4:	f5 22       	and	r15, r21
 9c6:	14 c0       	rjmp	.+40     	; 0x9f0 <vfprintf+0x1b6>
 9c8:	f5 01       	movw	r30, r10
 9ca:	c0 80       	ld	r12, Z
 9cc:	d1 80       	ldd	r13, Z+1	; 0x01
 9ce:	f6 fc       	sbrc	r15, 6
 9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <vfprintf+0x19e>
 9d2:	6f ef       	ldi	r22, 0xFF	; 255
 9d4:	7f ef       	ldi	r23, 0xFF	; 255
 9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0x1a2>
 9d8:	69 2d       	mov	r22, r9
 9da:	70 e0       	ldi	r23, 0x00	; 0
 9dc:	42 e0       	ldi	r20, 0x02	; 2
 9de:	50 e0       	ldi	r21, 0x00	; 0
 9e0:	a4 0e       	add	r10, r20
 9e2:	b5 1e       	adc	r11, r21
 9e4:	c6 01       	movw	r24, r12
 9e6:	0e 94 23 06 	call	0xc46	; 0xc46 <strnlen_P>
 9ea:	8c 01       	movw	r16, r24
 9ec:	50 e8       	ldi	r21, 0x80	; 128
 9ee:	f5 2a       	or	r15, r21
 9f0:	f3 fe       	sbrs	r15, 3
 9f2:	07 c0       	rjmp	.+14     	; 0xa02 <vfprintf+0x1c8>
 9f4:	1a c0       	rjmp	.+52     	; 0xa2a <vfprintf+0x1f0>
 9f6:	80 e2       	ldi	r24, 0x20	; 32
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	b3 01       	movw	r22, r6
 9fc:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 a00:	ea 94       	dec	r14
 a02:	8e 2d       	mov	r24, r14
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	08 17       	cp	r16, r24
 a08:	19 07       	cpc	r17, r25
 a0a:	a8 f3       	brcs	.-22     	; 0x9f6 <vfprintf+0x1bc>
 a0c:	0e c0       	rjmp	.+28     	; 0xa2a <vfprintf+0x1f0>
 a0e:	f6 01       	movw	r30, r12
 a10:	f7 fc       	sbrc	r15, 7
 a12:	85 91       	lpm	r24, Z+
 a14:	f7 fe       	sbrs	r15, 7
 a16:	81 91       	ld	r24, Z+
 a18:	6f 01       	movw	r12, r30
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	b3 01       	movw	r22, r6
 a1e:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 a22:	e1 10       	cpse	r14, r1
 a24:	ea 94       	dec	r14
 a26:	01 50       	subi	r16, 0x01	; 1
 a28:	10 40       	sbci	r17, 0x00	; 0
 a2a:	01 15       	cp	r16, r1
 a2c:	11 05       	cpc	r17, r1
 a2e:	79 f7       	brne	.-34     	; 0xa0e <vfprintf+0x1d4>
 a30:	ea c0       	rjmp	.+468    	; 0xc06 <vfprintf+0x3cc>
 a32:	94 36       	cpi	r25, 0x64	; 100
 a34:	11 f0       	breq	.+4      	; 0xa3a <vfprintf+0x200>
 a36:	99 36       	cpi	r25, 0x69	; 105
 a38:	69 f5       	brne	.+90     	; 0xa94 <vfprintf+0x25a>
 a3a:	f7 fe       	sbrs	r15, 7
 a3c:	08 c0       	rjmp	.+16     	; 0xa4e <vfprintf+0x214>
 a3e:	f5 01       	movw	r30, r10
 a40:	20 81       	ld	r18, Z
 a42:	31 81       	ldd	r19, Z+1	; 0x01
 a44:	42 81       	ldd	r20, Z+2	; 0x02
 a46:	53 81       	ldd	r21, Z+3	; 0x03
 a48:	84 e0       	ldi	r24, 0x04	; 4
 a4a:	90 e0       	ldi	r25, 0x00	; 0
 a4c:	0a c0       	rjmp	.+20     	; 0xa62 <vfprintf+0x228>
 a4e:	f5 01       	movw	r30, r10
 a50:	80 81       	ld	r24, Z
 a52:	91 81       	ldd	r25, Z+1	; 0x01
 a54:	9c 01       	movw	r18, r24
 a56:	44 27       	eor	r20, r20
 a58:	37 fd       	sbrc	r19, 7
 a5a:	40 95       	com	r20
 a5c:	54 2f       	mov	r21, r20
 a5e:	82 e0       	ldi	r24, 0x02	; 2
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	a8 0e       	add	r10, r24
 a64:	b9 1e       	adc	r11, r25
 a66:	9f e6       	ldi	r25, 0x6F	; 111
 a68:	f9 22       	and	r15, r25
 a6a:	57 ff       	sbrs	r21, 7
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <vfprintf+0x246>
 a6e:	50 95       	com	r21
 a70:	40 95       	com	r20
 a72:	30 95       	com	r19
 a74:	21 95       	neg	r18
 a76:	3f 4f       	sbci	r19, 0xFF	; 255
 a78:	4f 4f       	sbci	r20, 0xFF	; 255
 a7a:	5f 4f       	sbci	r21, 0xFF	; 255
 a7c:	e0 e8       	ldi	r30, 0x80	; 128
 a7e:	fe 2a       	or	r15, r30
 a80:	ca 01       	movw	r24, r20
 a82:	b9 01       	movw	r22, r18
 a84:	a1 01       	movw	r20, r2
 a86:	2a e0       	ldi	r18, 0x0A	; 10
 a88:	30 e0       	ldi	r19, 0x00	; 0
 a8a:	0e 94 65 06 	call	0xcca	; 0xcca <__ultoa_invert>
 a8e:	d8 2e       	mov	r13, r24
 a90:	d2 18       	sub	r13, r2
 a92:	40 c0       	rjmp	.+128    	; 0xb14 <vfprintf+0x2da>
 a94:	95 37       	cpi	r25, 0x75	; 117
 a96:	29 f4       	brne	.+10     	; 0xaa2 <vfprintf+0x268>
 a98:	1f 2d       	mov	r17, r15
 a9a:	1f 7e       	andi	r17, 0xEF	; 239
 a9c:	2a e0       	ldi	r18, 0x0A	; 10
 a9e:	30 e0       	ldi	r19, 0x00	; 0
 aa0:	1d c0       	rjmp	.+58     	; 0xadc <vfprintf+0x2a2>
 aa2:	1f 2d       	mov	r17, r15
 aa4:	19 7f       	andi	r17, 0xF9	; 249
 aa6:	9f 36       	cpi	r25, 0x6F	; 111
 aa8:	61 f0       	breq	.+24     	; 0xac2 <vfprintf+0x288>
 aaa:	90 37       	cpi	r25, 0x70	; 112
 aac:	20 f4       	brcc	.+8      	; 0xab6 <vfprintf+0x27c>
 aae:	98 35       	cpi	r25, 0x58	; 88
 ab0:	09 f0       	breq	.+2      	; 0xab4 <vfprintf+0x27a>
 ab2:	ac c0       	rjmp	.+344    	; 0xc0c <vfprintf+0x3d2>
 ab4:	0f c0       	rjmp	.+30     	; 0xad4 <vfprintf+0x29a>
 ab6:	90 37       	cpi	r25, 0x70	; 112
 ab8:	39 f0       	breq	.+14     	; 0xac8 <vfprintf+0x28e>
 aba:	98 37       	cpi	r25, 0x78	; 120
 abc:	09 f0       	breq	.+2      	; 0xac0 <vfprintf+0x286>
 abe:	a6 c0       	rjmp	.+332    	; 0xc0c <vfprintf+0x3d2>
 ac0:	04 c0       	rjmp	.+8      	; 0xaca <vfprintf+0x290>
 ac2:	28 e0       	ldi	r18, 0x08	; 8
 ac4:	30 e0       	ldi	r19, 0x00	; 0
 ac6:	0a c0       	rjmp	.+20     	; 0xadc <vfprintf+0x2a2>
 ac8:	10 61       	ori	r17, 0x10	; 16
 aca:	14 fd       	sbrc	r17, 4
 acc:	14 60       	ori	r17, 0x04	; 4
 ace:	20 e1       	ldi	r18, 0x10	; 16
 ad0:	30 e0       	ldi	r19, 0x00	; 0
 ad2:	04 c0       	rjmp	.+8      	; 0xadc <vfprintf+0x2a2>
 ad4:	14 fd       	sbrc	r17, 4
 ad6:	16 60       	ori	r17, 0x06	; 6
 ad8:	20 e1       	ldi	r18, 0x10	; 16
 ada:	32 e0       	ldi	r19, 0x02	; 2
 adc:	17 ff       	sbrs	r17, 7
 ade:	08 c0       	rjmp	.+16     	; 0xaf0 <vfprintf+0x2b6>
 ae0:	f5 01       	movw	r30, r10
 ae2:	60 81       	ld	r22, Z
 ae4:	71 81       	ldd	r23, Z+1	; 0x01
 ae6:	82 81       	ldd	r24, Z+2	; 0x02
 ae8:	93 81       	ldd	r25, Z+3	; 0x03
 aea:	44 e0       	ldi	r20, 0x04	; 4
 aec:	50 e0       	ldi	r21, 0x00	; 0
 aee:	08 c0       	rjmp	.+16     	; 0xb00 <vfprintf+0x2c6>
 af0:	f5 01       	movw	r30, r10
 af2:	80 81       	ld	r24, Z
 af4:	91 81       	ldd	r25, Z+1	; 0x01
 af6:	bc 01       	movw	r22, r24
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	90 e0       	ldi	r25, 0x00	; 0
 afc:	42 e0       	ldi	r20, 0x02	; 2
 afe:	50 e0       	ldi	r21, 0x00	; 0
 b00:	a4 0e       	add	r10, r20
 b02:	b5 1e       	adc	r11, r21
 b04:	a1 01       	movw	r20, r2
 b06:	0e 94 65 06 	call	0xcca	; 0xcca <__ultoa_invert>
 b0a:	d8 2e       	mov	r13, r24
 b0c:	d2 18       	sub	r13, r2
 b0e:	8f e7       	ldi	r24, 0x7F	; 127
 b10:	f8 2e       	mov	r15, r24
 b12:	f1 22       	and	r15, r17
 b14:	f6 fe       	sbrs	r15, 6
 b16:	0b c0       	rjmp	.+22     	; 0xb2e <vfprintf+0x2f4>
 b18:	5e ef       	ldi	r21, 0xFE	; 254
 b1a:	f5 22       	and	r15, r21
 b1c:	d9 14       	cp	r13, r9
 b1e:	38 f4       	brcc	.+14     	; 0xb2e <vfprintf+0x2f4>
 b20:	f4 fe       	sbrs	r15, 4
 b22:	07 c0       	rjmp	.+14     	; 0xb32 <vfprintf+0x2f8>
 b24:	f2 fc       	sbrc	r15, 2
 b26:	05 c0       	rjmp	.+10     	; 0xb32 <vfprintf+0x2f8>
 b28:	8f ee       	ldi	r24, 0xEF	; 239
 b2a:	f8 22       	and	r15, r24
 b2c:	02 c0       	rjmp	.+4      	; 0xb32 <vfprintf+0x2f8>
 b2e:	1d 2d       	mov	r17, r13
 b30:	01 c0       	rjmp	.+2      	; 0xb34 <vfprintf+0x2fa>
 b32:	19 2d       	mov	r17, r9
 b34:	f4 fe       	sbrs	r15, 4
 b36:	0d c0       	rjmp	.+26     	; 0xb52 <vfprintf+0x318>
 b38:	fe 01       	movw	r30, r28
 b3a:	ed 0d       	add	r30, r13
 b3c:	f1 1d       	adc	r31, r1
 b3e:	80 81       	ld	r24, Z
 b40:	80 33       	cpi	r24, 0x30	; 48
 b42:	19 f4       	brne	.+6      	; 0xb4a <vfprintf+0x310>
 b44:	99 ee       	ldi	r25, 0xE9	; 233
 b46:	f9 22       	and	r15, r25
 b48:	08 c0       	rjmp	.+16     	; 0xb5a <vfprintf+0x320>
 b4a:	1f 5f       	subi	r17, 0xFF	; 255
 b4c:	f2 fe       	sbrs	r15, 2
 b4e:	05 c0       	rjmp	.+10     	; 0xb5a <vfprintf+0x320>
 b50:	03 c0       	rjmp	.+6      	; 0xb58 <vfprintf+0x31e>
 b52:	8f 2d       	mov	r24, r15
 b54:	86 78       	andi	r24, 0x86	; 134
 b56:	09 f0       	breq	.+2      	; 0xb5a <vfprintf+0x320>
 b58:	1f 5f       	subi	r17, 0xFF	; 255
 b5a:	0f 2d       	mov	r16, r15
 b5c:	f3 fc       	sbrc	r15, 3
 b5e:	14 c0       	rjmp	.+40     	; 0xb88 <vfprintf+0x34e>
 b60:	f0 fe       	sbrs	r15, 0
 b62:	0f c0       	rjmp	.+30     	; 0xb82 <vfprintf+0x348>
 b64:	1e 15       	cp	r17, r14
 b66:	10 f0       	brcs	.+4      	; 0xb6c <vfprintf+0x332>
 b68:	9d 2c       	mov	r9, r13
 b6a:	0b c0       	rjmp	.+22     	; 0xb82 <vfprintf+0x348>
 b6c:	9d 2c       	mov	r9, r13
 b6e:	9e 0c       	add	r9, r14
 b70:	91 1a       	sub	r9, r17
 b72:	1e 2d       	mov	r17, r14
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <vfprintf+0x348>
 b76:	80 e2       	ldi	r24, 0x20	; 32
 b78:	90 e0       	ldi	r25, 0x00	; 0
 b7a:	b3 01       	movw	r22, r6
 b7c:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 b80:	1f 5f       	subi	r17, 0xFF	; 255
 b82:	1e 15       	cp	r17, r14
 b84:	c0 f3       	brcs	.-16     	; 0xb76 <vfprintf+0x33c>
 b86:	04 c0       	rjmp	.+8      	; 0xb90 <vfprintf+0x356>
 b88:	1e 15       	cp	r17, r14
 b8a:	10 f4       	brcc	.+4      	; 0xb90 <vfprintf+0x356>
 b8c:	e1 1a       	sub	r14, r17
 b8e:	01 c0       	rjmp	.+2      	; 0xb92 <vfprintf+0x358>
 b90:	ee 24       	eor	r14, r14
 b92:	04 ff       	sbrs	r16, 4
 b94:	0f c0       	rjmp	.+30     	; 0xbb4 <vfprintf+0x37a>
 b96:	80 e3       	ldi	r24, 0x30	; 48
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	b3 01       	movw	r22, r6
 b9c:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 ba0:	02 ff       	sbrs	r16, 2
 ba2:	1d c0       	rjmp	.+58     	; 0xbde <vfprintf+0x3a4>
 ba4:	01 fd       	sbrc	r16, 1
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x374>
 ba8:	88 e7       	ldi	r24, 0x78	; 120
 baa:	90 e0       	ldi	r25, 0x00	; 0
 bac:	0e c0       	rjmp	.+28     	; 0xbca <vfprintf+0x390>
 bae:	88 e5       	ldi	r24, 0x58	; 88
 bb0:	90 e0       	ldi	r25, 0x00	; 0
 bb2:	0b c0       	rjmp	.+22     	; 0xbca <vfprintf+0x390>
 bb4:	80 2f       	mov	r24, r16
 bb6:	86 78       	andi	r24, 0x86	; 134
 bb8:	91 f0       	breq	.+36     	; 0xbde <vfprintf+0x3a4>
 bba:	01 ff       	sbrs	r16, 1
 bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <vfprintf+0x388>
 bbe:	8b e2       	ldi	r24, 0x2B	; 43
 bc0:	01 c0       	rjmp	.+2      	; 0xbc4 <vfprintf+0x38a>
 bc2:	80 e2       	ldi	r24, 0x20	; 32
 bc4:	f7 fc       	sbrc	r15, 7
 bc6:	8d e2       	ldi	r24, 0x2D	; 45
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	b3 01       	movw	r22, r6
 bcc:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x3a4>
 bd2:	80 e3       	ldi	r24, 0x30	; 48
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	b3 01       	movw	r22, r6
 bd8:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 bdc:	9a 94       	dec	r9
 bde:	d9 14       	cp	r13, r9
 be0:	c0 f3       	brcs	.-16     	; 0xbd2 <vfprintf+0x398>
 be2:	da 94       	dec	r13
 be4:	f1 01       	movw	r30, r2
 be6:	ed 0d       	add	r30, r13
 be8:	f1 1d       	adc	r31, r1
 bea:	80 81       	ld	r24, Z
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	b3 01       	movw	r22, r6
 bf0:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 bf4:	dd 20       	and	r13, r13
 bf6:	a9 f7       	brne	.-22     	; 0xbe2 <vfprintf+0x3a8>
 bf8:	06 c0       	rjmp	.+12     	; 0xc06 <vfprintf+0x3cc>
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	b3 01       	movw	r22, r6
 c00:	0e 94 39 06 	call	0xc72	; 0xc72 <fputc>
 c04:	ea 94       	dec	r14
 c06:	ee 20       	and	r14, r14
 c08:	c1 f7       	brne	.-16     	; 0xbfa <vfprintf+0x3c0>
 c0a:	43 ce       	rjmp	.-890    	; 0x892 <vfprintf+0x58>
 c0c:	f3 01       	movw	r30, r6
 c0e:	66 81       	ldd	r22, Z+6	; 0x06
 c10:	77 81       	ldd	r23, Z+7	; 0x07
 c12:	cb 01       	movw	r24, r22
 c14:	2b 96       	adiw	r28, 0x0b	; 11
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	de bf       	out	0x3e, r29	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	cd bf       	out	0x3d, r28	; 61
 c20:	cf 91       	pop	r28
 c22:	df 91       	pop	r29
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	df 90       	pop	r13
 c2e:	cf 90       	pop	r12
 c30:	bf 90       	pop	r11
 c32:	af 90       	pop	r10
 c34:	9f 90       	pop	r9
 c36:	8f 90       	pop	r8
 c38:	7f 90       	pop	r7
 c3a:	6f 90       	pop	r6
 c3c:	5f 90       	pop	r5
 c3e:	4f 90       	pop	r4
 c40:	3f 90       	pop	r3
 c42:	2f 90       	pop	r2
 c44:	08 95       	ret

00000c46 <strnlen_P>:
 c46:	fc 01       	movw	r30, r24
 c48:	05 90       	lpm	r0, Z+
 c4a:	61 50       	subi	r22, 0x01	; 1
 c4c:	70 40       	sbci	r23, 0x00	; 0
 c4e:	01 10       	cpse	r0, r1
 c50:	d8 f7       	brcc	.-10     	; 0xc48 <strnlen_P+0x2>
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	8e 0f       	add	r24, r30
 c58:	9f 1f       	adc	r25, r31
 c5a:	08 95       	ret

00000c5c <strnlen>:
 c5c:	fc 01       	movw	r30, r24
 c5e:	61 50       	subi	r22, 0x01	; 1
 c60:	70 40       	sbci	r23, 0x00	; 0
 c62:	01 90       	ld	r0, Z+
 c64:	01 10       	cpse	r0, r1
 c66:	d8 f7       	brcc	.-10     	; 0xc5e <strnlen+0x2>
 c68:	80 95       	com	r24
 c6a:	90 95       	com	r25
 c6c:	8e 0f       	add	r24, r30
 c6e:	9f 1f       	adc	r25, r31
 c70:	08 95       	ret

00000c72 <fputc>:
 c72:	0f 93       	push	r16
 c74:	1f 93       	push	r17
 c76:	cf 93       	push	r28
 c78:	df 93       	push	r29
 c7a:	8c 01       	movw	r16, r24
 c7c:	eb 01       	movw	r28, r22
 c7e:	8b 81       	ldd	r24, Y+3	; 0x03
 c80:	81 ff       	sbrs	r24, 1
 c82:	1b c0       	rjmp	.+54     	; 0xcba <fputc+0x48>
 c84:	82 ff       	sbrs	r24, 2
 c86:	0d c0       	rjmp	.+26     	; 0xca2 <fputc+0x30>
 c88:	2e 81       	ldd	r18, Y+6	; 0x06
 c8a:	3f 81       	ldd	r19, Y+7	; 0x07
 c8c:	8c 81       	ldd	r24, Y+4	; 0x04
 c8e:	9d 81       	ldd	r25, Y+5	; 0x05
 c90:	28 17       	cp	r18, r24
 c92:	39 07       	cpc	r19, r25
 c94:	64 f4       	brge	.+24     	; 0xcae <fputc+0x3c>
 c96:	e8 81       	ld	r30, Y
 c98:	f9 81       	ldd	r31, Y+1	; 0x01
 c9a:	01 93       	st	Z+, r16
 c9c:	f9 83       	std	Y+1, r31	; 0x01
 c9e:	e8 83       	st	Y, r30
 ca0:	06 c0       	rjmp	.+12     	; 0xcae <fputc+0x3c>
 ca2:	e8 85       	ldd	r30, Y+8	; 0x08
 ca4:	f9 85       	ldd	r31, Y+9	; 0x09
 ca6:	80 2f       	mov	r24, r16
 ca8:	09 95       	icall
 caa:	89 2b       	or	r24, r25
 cac:	31 f4       	brne	.+12     	; 0xcba <fputc+0x48>
 cae:	8e 81       	ldd	r24, Y+6	; 0x06
 cb0:	9f 81       	ldd	r25, Y+7	; 0x07
 cb2:	01 96       	adiw	r24, 0x01	; 1
 cb4:	9f 83       	std	Y+7, r25	; 0x07
 cb6:	8e 83       	std	Y+6, r24	; 0x06
 cb8:	02 c0       	rjmp	.+4      	; 0xcbe <fputc+0x4c>
 cba:	0f ef       	ldi	r16, 0xFF	; 255
 cbc:	1f ef       	ldi	r17, 0xFF	; 255
 cbe:	c8 01       	movw	r24, r16
 cc0:	df 91       	pop	r29
 cc2:	cf 91       	pop	r28
 cc4:	1f 91       	pop	r17
 cc6:	0f 91       	pop	r16
 cc8:	08 95       	ret

00000cca <__ultoa_invert>:
 cca:	fa 01       	movw	r30, r20
 ccc:	aa 27       	eor	r26, r26
 cce:	28 30       	cpi	r18, 0x08	; 8
 cd0:	51 f1       	breq	.+84     	; 0xd26 <__ultoa_invert+0x5c>
 cd2:	20 31       	cpi	r18, 0x10	; 16
 cd4:	81 f1       	breq	.+96     	; 0xd36 <__ultoa_invert+0x6c>
 cd6:	e8 94       	clt
 cd8:	6f 93       	push	r22
 cda:	6e 7f       	andi	r22, 0xFE	; 254
 cdc:	6e 5f       	subi	r22, 0xFE	; 254
 cde:	7f 4f       	sbci	r23, 0xFF	; 255
 ce0:	8f 4f       	sbci	r24, 0xFF	; 255
 ce2:	9f 4f       	sbci	r25, 0xFF	; 255
 ce4:	af 4f       	sbci	r26, 0xFF	; 255
 ce6:	b1 e0       	ldi	r27, 0x01	; 1
 ce8:	3e d0       	rcall	.+124    	; 0xd66 <__ultoa_invert+0x9c>
 cea:	b4 e0       	ldi	r27, 0x04	; 4
 cec:	3c d0       	rcall	.+120    	; 0xd66 <__ultoa_invert+0x9c>
 cee:	67 0f       	add	r22, r23
 cf0:	78 1f       	adc	r23, r24
 cf2:	89 1f       	adc	r24, r25
 cf4:	9a 1f       	adc	r25, r26
 cf6:	a1 1d       	adc	r26, r1
 cf8:	68 0f       	add	r22, r24
 cfa:	79 1f       	adc	r23, r25
 cfc:	8a 1f       	adc	r24, r26
 cfe:	91 1d       	adc	r25, r1
 d00:	a1 1d       	adc	r26, r1
 d02:	6a 0f       	add	r22, r26
 d04:	71 1d       	adc	r23, r1
 d06:	81 1d       	adc	r24, r1
 d08:	91 1d       	adc	r25, r1
 d0a:	a1 1d       	adc	r26, r1
 d0c:	20 d0       	rcall	.+64     	; 0xd4e <__ultoa_invert+0x84>
 d0e:	09 f4       	brne	.+2      	; 0xd12 <__ultoa_invert+0x48>
 d10:	68 94       	set
 d12:	3f 91       	pop	r19
 d14:	2a e0       	ldi	r18, 0x0A	; 10
 d16:	26 9f       	mul	r18, r22
 d18:	11 24       	eor	r1, r1
 d1a:	30 19       	sub	r19, r0
 d1c:	30 5d       	subi	r19, 0xD0	; 208
 d1e:	31 93       	st	Z+, r19
 d20:	de f6       	brtc	.-74     	; 0xcd8 <__ultoa_invert+0xe>
 d22:	cf 01       	movw	r24, r30
 d24:	08 95       	ret
 d26:	46 2f       	mov	r20, r22
 d28:	47 70       	andi	r20, 0x07	; 7
 d2a:	40 5d       	subi	r20, 0xD0	; 208
 d2c:	41 93       	st	Z+, r20
 d2e:	b3 e0       	ldi	r27, 0x03	; 3
 d30:	0f d0       	rcall	.+30     	; 0xd50 <__ultoa_invert+0x86>
 d32:	c9 f7       	brne	.-14     	; 0xd26 <__ultoa_invert+0x5c>
 d34:	f6 cf       	rjmp	.-20     	; 0xd22 <__ultoa_invert+0x58>
 d36:	46 2f       	mov	r20, r22
 d38:	4f 70       	andi	r20, 0x0F	; 15
 d3a:	40 5d       	subi	r20, 0xD0	; 208
 d3c:	4a 33       	cpi	r20, 0x3A	; 58
 d3e:	18 f0       	brcs	.+6      	; 0xd46 <__ultoa_invert+0x7c>
 d40:	49 5d       	subi	r20, 0xD9	; 217
 d42:	31 fd       	sbrc	r19, 1
 d44:	40 52       	subi	r20, 0x20	; 32
 d46:	41 93       	st	Z+, r20
 d48:	02 d0       	rcall	.+4      	; 0xd4e <__ultoa_invert+0x84>
 d4a:	a9 f7       	brne	.-22     	; 0xd36 <__ultoa_invert+0x6c>
 d4c:	ea cf       	rjmp	.-44     	; 0xd22 <__ultoa_invert+0x58>
 d4e:	b4 e0       	ldi	r27, 0x04	; 4
 d50:	a6 95       	lsr	r26
 d52:	97 95       	ror	r25
 d54:	87 95       	ror	r24
 d56:	77 95       	ror	r23
 d58:	67 95       	ror	r22
 d5a:	ba 95       	dec	r27
 d5c:	c9 f7       	brne	.-14     	; 0xd50 <__ultoa_invert+0x86>
 d5e:	00 97       	sbiw	r24, 0x00	; 0
 d60:	61 05       	cpc	r22, r1
 d62:	71 05       	cpc	r23, r1
 d64:	08 95       	ret
 d66:	9b 01       	movw	r18, r22
 d68:	ac 01       	movw	r20, r24
 d6a:	0a 2e       	mov	r0, r26
 d6c:	06 94       	lsr	r0
 d6e:	57 95       	ror	r21
 d70:	47 95       	ror	r20
 d72:	37 95       	ror	r19
 d74:	27 95       	ror	r18
 d76:	ba 95       	dec	r27
 d78:	c9 f7       	brne	.-14     	; 0xd6c <__ultoa_invert+0xa2>
 d7a:	62 0f       	add	r22, r18
 d7c:	73 1f       	adc	r23, r19
 d7e:	84 1f       	adc	r24, r20
 d80:	95 1f       	adc	r25, r21
 d82:	a0 1d       	adc	r26, r0
 d84:	08 95       	ret

00000d86 <_exit>:
 d86:	f8 94       	cli

00000d88 <__stop_program>:
 d88:	ff cf       	rjmp	.-2      	; 0xd88 <__stop_program>
