   1               		.file	"main.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__CCP__  = 0x34
   6               	__tmp_reg__ = 0
   7               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  84               	.global	arriveCom
  85               	.global	arriveCom
  86               		.section .bss
  89               	arriveCom:
  90 0000 00        		.skip 1,0
  91               	.global	timeFlag
  92               		.data
  95               	timeFlag:
  96 0000 01        		.byte	1
  97               	.global	keyFlag
  98               	.global	keyFlag
  99               		.section .bss
 102               	keyFlag:
 103 0001 00        		.skip 1,0
 104               	.global	lightFlag
 105               		.data
 108               	lightFlag:
 109 0001 01        		.byte	1
 110               	.global	notSend
 111               	.global	notSend
 112               		.section .bss
 115               	notSend:
 116 0002 00        		.skip 1,0
 117               	.global	tcnt
 118               		.data
 121               	tcnt:
 122 0002 3D00      		.word	61
 123               	.global	i_buf
 124               	.global	i_buf
 125               		.section .bss
 128               	i_buf:
 129 0003 0000      		.skip 2,0
 130               	.global	i_mes
 131               	.global	i_mes
 134               	i_mes:
 135 0005 0000      		.skip 2,0
 136               		.data
 137               	.LC0:
 138 0004 6164 7265 		.string	"adress = %d, value = %d\n\r"
 138      7373 203D 
 138      2025 642C 
 138      2076 616C 
 138      7565 203D 
 139               		.text
 142               	.global	sendByte
 144               	sendByte:
   1:main.c        **** #include <avr/io.h>
   2:main.c        **** #include <avr/interrupt.h>
   3:main.c        **** #include <util/delay.h>
   4:main.c        **** #include <avr/sleep.h>
   5:main.c        **** #include <stdlib.h>
   6:main.c        **** #include <string.h>
   7:main.c        **** #include <stdio.h>
   8:main.c        **** 
   9:main.c        **** 
  10:main.c        **** #define baudrate 9600L
  11:main.c        **** #define F_CPU 8000000L
  12:main.c        **** #define bauddivider (F_CPU/(16 * baudrate) - 1)
  13:main.c        **** #define HI(x) ((x) >> 8)
  14:main.c        **** #define LO(x) ((x)& 0xFF)
  15:main.c        **** 
  16:main.c        **** //флаг сигнализирует о том, что принята команда
  17:main.c        **** volatile char arriveCom = 0;
  18:main.c        **** //флаг истечения времени задержки
  19:main.c        **** //поднимается каждые 2 секунды
  20:main.c        **** //по умолчанию поднят, чтобы при старте программы начать показывать экшен
  21:main.c        **** volatile char timeFlag = 1;
  22:main.c        **** 
  23:main.c        **** volatile char keyFlag = 0;
  24:main.c        **** 
  25:main.c        **** volatile char lightFlag = 1;
  26:main.c        **** 
  27:main.c        **** volatile char notSend = 0;
  28:main.c        **** 
  29:main.c        **** 
  30:main.c        **** //значение вычисляется на этапе компиляции
  31:main.c        **** volatile int tcnt = 2 * F_CPU / 1024 / 256;
  32:main.c        **** 
  33:main.c        **** //указатель на очередной байт в памяти
  34:main.c        **** unsigned char * RAMPointer;
  35:main.c        **** 
  36:main.c        **** //размер буфера для поступающей команды
  37:main.c        **** #define bufSize 40
  38:main.c        **** //буфер поступающей команды
  39:main.c        **** char buf[bufSize];
  40:main.c        **** //индекс буфера
  41:main.c        **** unsigned short i_buf = 0;
  42:main.c        **** 
  43:main.c        **** #define mesLen 40
  44:main.c        **** //буфер сообщения для оператора
  45:main.c        **** char message[mesLen];
  46:main.c        **** //индекс сообдения
  47:main.c        **** unsigned short i_mes = 0;
  48:main.c        **** 
  49:main.c        **** 
  50:main.c        **** //используемые функции
  51:main.c        **** void sendByte(unsigned char value)
  52:main.c        **** {
 145               	
 146               		push r28
 147               		in r28,__SP_L__
 148 0000 DF93      		in r29,__SP_H__
 149 0002 CF93      		subi r28,lo8(-(-1001))
 150 0004 CDB7      		sbci r29,hi8(-(-1001))
 151 0006 DEB7      		in __tmp_reg__,__SREG__
 152 0008 C95E      		cli
 153 000a D340      		out __SP_H__,r29
 154 000c 0FB6      		out __SREG__,__tmp_reg__
 155 000e F894      		out __SP_L__,r28
 156 0010 DEBF      	/* prologue: function */
 157 0012 0FBE      	/* frame size = 1001 */
 158 0014 CDBF      		movw r30,r28
 159               		subi r30,lo8(-(1001))
 160               		sbci r31,hi8(-(1001))
 161 0016 FE01      		st Z,r24
 163 001a FC4F      	.LM1:
 164 001c 8083      		lds r18,RAMPointer
  53:main.c        **** 	char bufer[1000];
  54:main.c        **** 	sprintf(bufer, "adress = %d, value = %d\n\r", RAMPointer, value);
 165               	r)+1
 166               		movw r30,r28
 167 001e 2091 0000 		subi r30,lo8(-(1001))
 168 0022 3091 0000 		sbci r31,hi8(-(1001))
 169 0026 FE01      		ld r24,Z
 170 0028 E751      		mov r20,r24
 171 002a FC4F      		ldi r21,lo8(0)
 172 002c 8081      		in r24,__SP_L__
 173 002e 482F      		in r25,__SP_H__
 174 0030 50E0      		sbiw r24,8
 175 0032 8DB7      		in __tmp_reg__,__SREG__
 176 0034 9EB7      		cli
 177 0036 0897      		out __SP_H__,r25
 178 0038 0FB6      		out __SREG__,__tmp_reg__
 179 003a F894      		out __SP_L__,r24
 180 003c 9EBF      		in r30,__SP_L__
 181 003e 0FBE      		in r31,__SP_H__
 182 0040 8DBF      		adiw r30,1
 183 0042 EDB7      		movw r24,r28
 184 0044 FEB7      		adiw r24,1
 185 0046 3196      		std Z+1,r25
 186 0048 CE01      		st Z,r24
 187 004a 0196      		ldi r24,lo8(.LC0)
 188 004c 9183      		ldi r25,hi8(.LC0)
 189 004e 8083      		std Z+3,r25
 190 0050 80E0      		std Z+2,r24
 191 0052 90E0      		std Z+5,r19
 192 0054 9383      		std Z+4,r18
 193 0056 8283      		std Z+7,r21
 194 0058 3583      		std Z+6,r20
 195 005a 2483      		call sprintf
 196 005c 5783      		in r24,__SP_L__
 197 005e 4683      		in r25,__SP_H__
 198 0060 0E94 0000 		adiw r24,8
 199 0064 8DB7      		in __tmp_reg__,__SREG__
 200 0066 9EB7      		cli
 201 0068 0896      		out __SP_H__,r25
 202 006a 0FB6      		out __SREG__,__tmp_reg__
 203 006c F894      		out __SP_L__,r24
 205 0070 0FBE      	.LM2:
 206 0072 8DBF      		movw r24,r28
  55:main.c        **** 	sendStr(bufer);
 207               	t */
 209 0074 CE01      	.LM3:
 210 0076 0196      		subi r28,lo8(-(1001))
 211 0078 0E94 0000 		sbci r29,hi8(-(1001))
 212               		in __tmp_reg__,__SREG__
  56:main.c        **** };
 213               	out __SP_H__,r29
 214               		out __SREG__,__tmp_reg__
 215 007c C751      		out __SP_L__,r28
 216 007e DC4F      		pop r28
 217 0080 0FB6      		pop r29
 218 0082 F894      		ret
 223 008c DF91      	.Lscope1:
 226               	.global	sendStr
 228               	sendStr:
 230               	.LM4:
 231               	.LFBB2:
 232               		push r29
 233               		push r28
 234               		rcall .
  57:main.c        **** 
  58:main.c        **** void sendStr(char *string){
 235               	29,__SP_H__
 236               	/* prologue: function */
 237               	/* frame size = 2 */
 238 0090 DF93      		std Y+2,r25
 239 0092 CF93      		std Y+1,r24
 241 0096 CDB7      	.LM5:
 242 0098 DEB7      		ldi r24,lo8(message)
 243               		ldi r25,hi8(message)
 244               		ldd r18,Y+1
 245 009a 9A83      		ldd r19,Y+2
 246 009c 8983      		movw r22,r18
  59:main.c        **** 	strcpy(message, string);
 247               	
 249 009e 80E0      	.LM6:
 250 00a0 90E0      		sts (i_mes)+1,__zero_reg__
 251 00a2 2981      		sts i_mes,__zero_reg__
 253 00a6 B901      	.LM7:
 254 00a8 0E94 0000 		ldi r30,lo8(156)
  60:main.c        **** 	i_mes=0;		// сбрасываем индекс
 255               	1,hi8(156)
 256               		lds r24,message
 257 00ac 1092 0000 		st Z,r24
  61:main.c        **** 	UDR1 = message[0];	// отправляем первый байт
 259               	:
 260               		ldi r26,lo8(154)
 261 00b4 ECE9      		ldi r27,hi8(154)
 262 00b6 F0E0      		ldi r30,lo8(154)
 263 00b8 8091 0000 		ldi r31,hi8(154)
 264 00bc 8083      		ld r24,Z
  62:main.c        **** 	UCSR1B|=(1<<UDRIE1);// разрешаем прерываение UDRE
 265               	24,lo8(32)
 266               		st X,r24
 267 00be AAE9      	/* epilogue start */
 269 00c2 EAE9      	.LM9:
 270 00c4 F0E0      		pop __tmp_reg__
 271 00c6 8081      		pop __tmp_reg__
 272 00c8 8062      		pop r28
 273 00ca 8C93      		pop r29
 274               		ret
  63:main.c        **** }
 275               	dStr, .-sendStr
 276               	.Lscope2:
 278 00ce 0F90      	.global	nextAdr
 280 00d2 DF91      	nextAdr:
 282               	.LM10:
 283               	.LFBB3:
 284               		push r29
 285               		push r28
 286               		rcall .
 287               		push __tmp_reg__
  64:main.c        **** 
  65:main.c        **** /*
  66:main.c        **** 	функции следят за выходом за границу допустимых значений 
  67:main.c        **** 	указателя
  68:main.c        **** */
  69:main.c        **** void nextAdr()
  70:main.c        **** {
 288               	L__
 289               		in r29,__SP_H__
 290               	/* prologue: function */
 291 00d6 DF93      	/* frame size = 3 */
 293 00da 00D0      	.LM11:
 294 00dc 0F92      		lds r24,RAMPointer
 295 00de CDB7      		lds r25,(RAMPointer)+1
 296 00e0 DEB7      		std Y+3,r25
 297               		std Y+2,r24
 298               		std Y+1,__zero_reg__
  71:main.c        **** 	if ( RAMPointer++ > 4096 )
 299               	2
 300               		ldd r25,Y+3
 301 00e2 8091 0000 		ldi r18,hi8(4097)
 302 00e6 9091 0000 		cpi r24,lo8(4097)
 303 00ea 9B83      		cpc r25,r18
 304 00ec 8A83      		brlo .L6
 305 00ee 1982      		ldi r24,lo8(1)
 306 00f0 8A81      		std Y+1,r24
 307 00f2 9B81      	.L6:
 308 00f4 20E1      		ldd r24,Y+2
 309 00f6 8130      		ldd r25,Y+3
 310 00f8 9207      		adiw r24,1
 311 00fa 00F0      		sts (RAMPointer)+1,r25
 312 00fc 81E0      		sts RAMPointer,r24
 313 00fe 8983      		ldd r25,Y+1
 314               		tst r25
 315 0100 8A81      		breq .L8
 317 0104 0196      	.LM12:
 318 0106 9093 0000 		sts (RAMPointer)+1,__zero_reg__
 319 010a 8093 0000 		sts RAMPointer,__zero_reg__
 320 010e 9981      	.L8:
 321 0110 9923      	/* epilogue start */
  72:main.c        **** 	{
  73:main.c        **** 		RAMPointer = 0;
 323               		pop __tmp_reg__
 324               		pop __tmp_reg__
 325 0114 1092 0000 		pop r28
 326 0118 1092 0000 		pop r29
 327               		ret
  74:main.c        **** 	}
  75:main.c        **** }
 329               	e3:
 331 011c 0F90      	.global	prevAdr
 333 0120 0F90      	prevAdr:
 335 0124 DF91      	.LM14:
 336 0126 0895      	.LFBB4:
 337               		push r29
 338               		push r28
 339               		in r28,__SP_L__
 340               		in r29,__SP_H__
 341               	/* prologue: function */
 342               	/* frame size = 0 */
  76:main.c        **** 
  77:main.c        **** void prevAdr()
  78:main.c        **** {
 343               	9,.LM15-.LFBB4
 344               	.LM15:
 345               		lds r24,RAMPointer
 346 0128 DF93      		lds r25,(RAMPointer)+1
 347 012a CF93      		sbiw r24,1
 348 012c CDB7      		sts (RAMPointer)+1,r25
 349 012e DEB7      		sts RAMPointer,r24
 350               	/* epilogue start */
  79:main.c        **** 	if ( RAMPointer-- < 0 )
 352               	op r28
 353               		pop r29
 354 0130 8091 0000 		ret
 356 0138 0197      	.Lscope4:
 358 013e 8093 0000 	.global	__vector_30
  80:main.c        **** 	{
  81:main.c        **** 		RAMPointer = 4095;
  82:main.c        **** 	}
  83:main.c        **** }
 360               	_30:
 362 0142 CF91      	.LM17:
 363 0144 DF91      	.LFBB5:
 364 0146 0895      		push __zero_reg__
 365               		push r0
 366               		in r0,__SREG__
 367               		push r0
 368               		lds r0,91
 369               		push r0
 370               		clr __zero_reg__
  84:main.c        **** 
  85:main.c        **** //вектор прерываний
  86:main.c        **** 
  87:main.c        **** //обработчик прерывания по приходу байта в уарт
  88:main.c        **** ISR (USART1_RX_vect)
  89:main.c        **** {
 371               	push r19
 372               		push r24
 373               		push r25
 374 0148 1F92      		push r30
 375 014a 0F92      		push r31
 376 014c 0FB6      		push r29
 377 014e 0F92      		push r28
 378 0150 0090 5B00 		push __tmp_reg__
 379 0154 0F92      		in r28,__SP_L__
 380 0156 1124      		in r29,__SP_H__
 381 0158 2F93      	/* prologue: Signal */
 382 015a 3F93      	/* frame size = 1 */
 384 015e 9F93      	.LM18:
 385 0160 EF93      		ldi r30,lo8(156)
 386 0162 FF93      		ldi r31,hi8(156)
 387 0164 DF93      		ld r24,Z
 388 0166 CF93      		std Y+1,r24
 390 016a CDB7      	.LM19:
 391 016c DEB7      		ldi r30,lo8(156)
 392               		ldi r31,hi8(156)
 393               		ldd r24,Y+1
  90:main.c        **** 	//считанный байт
  91:main.c        **** 	unsigned char byte;
  92:main.c        **** 
  93:main.c        **** 	//читаем байт
  94:main.c        **** 	byte = UDR1;
 394               	99,.LM20-.LFBB5
 395               	.LM20:
 396 016e ECE9      		ldd r24,Y+1
 397 0170 F0E0      		cpi r24,lo8(13)
 398 0172 8081      		brne .L12
  95:main.c        **** 	//эхо через узел
  96:main.c        **** 	UDR1 = byte;
 400               	
 401               		ldi r24,lo8(1)
 402 0176 ECE9      		sts arriveCom,r24
 403 0178 F0E0      		rjmp .L14
 404 017a 8981      	.L12:
  97:main.c        **** 
  98:main.c        **** 	//если нажата клавиша enter, то ввод команды завершен
  99:main.c        **** 	if (byte == 0x0d)
 406               	:
 407               		lds r24,i_buf
 408 017e 8981      		lds r25,(i_buf)+1
 409 0180 8D30      		cpi r24,40
 410 0182 01F4      		cpc r25,__zero_reg__
 100:main.c        **** 	{
 101:main.c        **** 		arriveCom = 1;
 411               	 .L14
 413 0184 81E0      	.LM23:
 414 0186 8093 0000 		lds r18,i_buf
 415 018a 00C0      		lds r19,(i_buf)+1
 416               		movw r30,r18
 102:main.c        **** 	}
 103:main.c        **** 	else
 104:main.c        **** 	{
 105:main.c        **** 		//запоминаем принятый байт в буфере
 106:main.c        **** 		if ( i_buf < mesLen )
 417               	r30,lo8(-(buf))
 418               		sbci r31,hi8(-(buf))
 419 018c 8091 0000 		ldd r24,Y+1
 420 0190 9091 0000 		st Z,r24
 421 0194 8832      		movw r24,r18
 422 0196 9105      		adiw r24,1
 423 0198 00F4      		sts (i_buf)+1,r25
 107:main.c        **** 		{
 108:main.c        **** 			buf[i_buf++] = byte;	
 424               	buf,r24
 425               	.L14:
 426 019a 2091 0000 	/* epilogue start */
 428 01a2 F901      	.LM24:
 429 01a4 E050      		pop __tmp_reg__
 430 01a6 F040      		pop r28
 431 01a8 8981      		pop r29
 432 01aa 8083      		pop r31
 433 01ac C901      		pop r30
 434 01ae 0196      		pop r25
 435 01b0 9093 0000 		pop r24
 436 01b4 8093 0000 		pop r19
 437               		pop r18
 438               		pop r0
 109:main.c        **** 		}
 110:main.c        **** 	}
 111:main.c        **** }
 439               	 r0
 440               		out __SREG__,r0
 441 01b8 0F90      		pop r0
 442 01ba CF91      		pop __zero_reg__
 443 01bc DF91      		reti
 448 01c6 3F91      	.Lscope5:
 450 01ca 0F90      	.global	__vector_31
 452 01d0 0F90      	__vector_31:
 454 01d4 0F90      	.LM25:
 455 01d6 1F90      	.LFBB6:
 456 01d8 1895      		push __zero_reg__
 457               		push r0
 458               		in r0,__SREG__
 459               		push r0
 460               		lds r0,91
 461               		push r0
 462               		clr __zero_reg__
 463               		push r24
 464               		push r25
 465               		push r26
 112:main.c        **** 
 113:main.c        **** //прерываение по опустошению буффера USART
 114:main.c        **** ISR (USART1_UDRE_vect)
 115:main.c        **** {
 466               	31
 467               		push r29
 468               		push r28
 469 01da 1F92      		in r28,__SP_L__
 470 01dc 0F92      		in r29,__SP_H__
 471 01de 0FB6      	/* prologue: Signal */
 472 01e0 0F92      	/* frame size = 0 */
 474 01e6 0F92      	.LM26:
 475 01e8 1124      		lds r24,i_mes
 476 01ea 8F93      		lds r25,(i_mes)+1
 477 01ec 9F93      		adiw r24,1
 478 01ee AF93      		sts (i_mes)+1,r25
 479 01f0 BF93      		sts i_mes,r24
 481 01f4 FF93      	.LM27:
 482 01f6 DF93      		lds r24,i_mes
 483 01f8 CF93      		lds r25,(i_mes)+1
 484 01fa CDB7      		movw r30,r24
 485 01fc DEB7      		subi r30,lo8(-(message))
 486               		sbci r31,hi8(-(message))
 487               		ld r24,Z
 116:main.c        **** 	i_mes++;			
 488               	stabn	68,0,122,.LM28-.LFBB6
 489               	.LM28:
 490 01fe 8091 0000 		ldi r26,lo8(154)
 491 0202 9091 0000 		ldi r27,hi8(154)
 492 0206 0196      		ldi r30,lo8(154)
 493 0208 9093 0000 		ldi r31,hi8(154)
 494 020c 8093 0000 		ld r24,Z
 117:main.c        ****  
 118:main.c        ****  	//вывели весь буфер?
 119:main.c        **** 	if( message[i_mes] == '\0' )
 495               	24,lo8(-33)
 496               		st X,r24
 497 0210 8091 0000 		rjmp .L18
 498 0214 9091 0000 	.L16:
 500 021a E050      	.LM29:
 501 021c F040      		ldi r26,lo8(156)
 502 021e 8081      		ldi r27,hi8(156)
 503 0220 8823      		lds r24,i_mes
 504 0222 01F4      		lds r25,(i_mes)+1
 120:main.c        **** 	{ 
 121:main.c        **** 		// запрещаем прерывание по опустошению - передача закончена
 122:main.c        **** 		UCSR1B &=~(1<<UDRIE1);
 505               	r24
 506               		subi r30,lo8(-(message))
 507 0224 AAE9      		sbci r31,hi8(-(message))
 508 0226 B0E0      		ld r24,Z
 509 0228 EAE9      		st X,r24
 510 022a F0E0      	.L18:
 511 022c 8081      	/* epilogue start */
 513 0230 8C93      	.LM30:
 514 0232 00C0      		pop r28
 515               		pop r29
 123:main.c        **** 	}
 124:main.c        **** 	else 
 125:main.c        **** 	{
 126:main.c        **** 		// берем данные из буффера.
 127:main.c        **** 		UDR1 = message[i_mes];
 516               	op r30
 517               		pop r27
 518 0234 ACE9      		pop r26
 519 0236 B0E0      		pop r25
 520 0238 8091 0000 		pop r24
 521 023c 9091 0000 		pop r0
 522 0240 FC01      		sts 91,r0
 523 0242 E050      		pop r0
 524 0244 F040      		out __SREG__,r0
 525 0246 8081      		pop r0
 526 0248 8C93      		pop __zero_reg__
 527               		reti
 128:main.c        **** 	}
 129:main.c        **** }
 529               	tabs	"__vector_16:F(0,15)",36,0,0,__vector_16
 530               	.global	__vector_16
 532 024c DF91      	__vector_16:
 534 0250 EF91      	.LM31:
 535 0252 BF91      	.LFBB7:
 536 0254 AF91      		push __zero_reg__
 537 0256 9F91      		push r0
 538 0258 8F91      		in r0,__SREG__
 539 025a 0F90      		push r0
 540 025c 0092 5B00 		clr __zero_reg__
 541 0260 0F90      		push r24
 542 0262 0FBE      		push r25
 543 0264 0F90      		push r29
 544 0266 1F90      		push r28
 545 0268 1895      		in r28,__SP_L__
 546               		in r29,__SP_H__
 547               	/* prologue: Signal */
 548               	/* frame size = 0 */
 550               	.LM32:
 551               		lds r24,tcnt
 130:main.c        **** 
 131:main.c        **** 
 132:main.c        **** //прерывание по переполнению таймера
 133:main.c        **** ISR(TIMER0_OVF_vect)
 134:main.c        **** {
 552               	 r24,1
 553               		sts (tcnt)+1,r25
 554               		sts tcnt,r24
 556 026c 0F92      	.LM33:
 557 026e 0FB6      		lds r24,tcnt
 558 0270 0F92      		lds r25,(tcnt)+1
 559 0272 1124      		sbiw r24,0
 560 0274 8F93      		brne .L21
 562 0278 DF93      	.LM34:
 563 027a CF93      		ldi r24,lo8(1)
 564 027c CDB7      		sts timeFlag,r24
 566               	.LM35:
 567               		ldi r24,lo8(10)
 135:main.c        **** 	tcnt--;
 568               	
 569               		sts (tcnt)+1,r25
 570 0280 8091 0000 		sts tcnt,r24
 571 0284 9091 0000 	.L21:
 572 0288 0197      	/* epilogue start */
 574 028e 8093 0000 	.LM36:
 136:main.c        **** 	if (tcnt == 0)
 575               	28
 576               		pop r29
 577 0292 8091 0000 		pop r25
 578 0296 9091 0000 		pop r24
 579 029a 0097      		pop r0
 580 029c 01F4      		out __SREG__,r0
 137:main.c        **** 	{
 138:main.c        **** 		//поднимаем флаг истечения 2-х секундного интервала
 139:main.c        **** 		timeFlag = 1;
 581               	0
 582               		pop __zero_reg__
 583 029e 81E0      		reti
 140:main.c        **** 		//вновь увеличиваем счетчик для замера следующих 2-х секунд
 141:main.c        **** 		tcnt = 10;
 585               	ope7:
 587 02a4 8AE0      	.global	main
 589 02a8 9093 0000 	main:
 591               	.LM37:
 592               	.LFBB8:
 142:main.c        **** 	}
 143:main.c        **** }
 593               	9
 594               		push r28
 595 02b0 CF91      		in r28,__SP_L__
 596 02b2 DF91      		in r29,__SP_H__
 597 02b4 9F91      		subi r28,lo8(-(-267))
 598 02b6 8F91      		sbci r29,hi8(-(-267))
 599 02b8 0F90      		in __tmp_reg__,__SREG__
 600 02ba 0FBE      		cli
 601 02bc 0F90      		out __SP_H__,r29
 602 02be 1F90      		out __SREG__,__tmp_reg__
 603 02c0 1895      		out __SP_L__,r28
 604               	/* prologue: function */
 605               	/* frame size = 267 */
 607               	.LM38:
 608               		std Y+5,__zero_reg__
 609               		std Y+4,__zero_reg__
 144:main.c        **** 
 145:main.c        **** 
 146:main.c        **** 
 147:main.c        **** int main(void) 
 610               	eg__
 611               		std Y+2,__zero_reg__
 613 02c2 DF93      	.LM39:
 614 02c4 CF93      		ldi r30,lo8(34)
 615 02c6 CDB7      		ldi r31,hi8(34)
 616 02c8 DEB7      		ldi r24,lo8(14)
 617 02ca CB50      		st Z,r24
 619 02ce 0FB6      	.LM40:
 620 02d0 F894      		ldi r30,lo8(55)
 621 02d2 DEBF      		ldi r31,hi8(55)
 622 02d4 0FBE      		st Z,__zero_reg__
 624               	.LM41:
 625               		ldi r30,lo8(56)
 148:main.c        **** 
 149:main.c        **** {
 150:main.c        **** 
 151:main.c        **** 	//служебные переменные
 626               	
 627               		st Z,__zero_reg__
 629 02da 1C82      	.LM42:
 630 02dc 1B82      		ldi r30,lo8(83)
 631 02de 1A82      		ldi r31,hi8(83)
 152:main.c        **** 
 153:main.c        **** 	//счетчики для циклов 
 154:main.c        **** 	int i, j, k = 0, n = 0;
 155:main.c        **** 	
 156:main.c        **** 	//значение байта из памяти
 157:main.c        **** 	unsigned char value;
 158:main.c        **** 
 159:main.c        **** 
 632               	r24,lo8(7)
 633               		st Z,r24
 635 02e2 F0E0      	.LM43:
 636 02e4 8EE0      		ldi r30,lo8(87)
 637 02e6 8083      		ldi r31,hi8(87)
 160:main.c        **** 
 161:main.c        **** 	//настраиваем оборудование с которым будем работать 
 162:main.c        **** 	//контакты 1,2,3 порта Е для вывода
 638               	24,lo8(1)
 639               		st Z,r24
 641 02ea F0E0      	.LM44:
 642 02ec 1082      		ldi r30,lo8(153)
 163:main.c        **** 
 164:main.c        **** 	DDRE = (1 << PE1) | (1 << PE2) | (1 << PE3);
 643               	r31,hi8(153)
 644               		ldi r24,lo8(51)
 645 02ee E8E3      		st Z,r24
 647 02f2 1082      	.LM45:
 165:main.c        **** 
 166:main.c        **** 	//контакты 4,6 порта B для ввода
 167:main.c        **** 	//(кнопки)
 648               	r30,lo8(152)
 649               		ldi r31,hi8(152)
 650 02f4 E3E5      		st Z,__zero_reg__
 652 02f8 87E0      	.LM46:
 653 02fa 8083      		ldi r30,lo8(155)
 168:main.c        **** 
 654               	31,hi8(155)
 655               		st Z,__zero_reg__
 657 02fe F0E0      	.LM47:
 658 0300 81E0      		ldi r30,lo8(154)
 659 0302 8083      		ldi r31,hi8(154)
 169:main.c        **** 
 170:main.c        **** 	DDRB = (0<<PB5) | (0<<PB6);
 171:main.c        **** 	//подтягивающие резисторы для порта B
 172:main.c        **** 	PORTB = (0<<PB5) | (0<<PB6);
 660               	24,lo8(-104)
 661               		st Z,r24
 663 0306 F0E0      	.LM48:
 664 0308 83E3      		ldi r30,lo8(157)
 665 030a 8083      		ldi r31,hi8(157)
 173:main.c        **** 
 666               	24,lo8(14)
 667               		st Z,r24
 669 030e F0E0      	.LM49:
 670 0310 1082      	/* #APP */
 174:main.c        **** 
 175:main.c        **** 
 671               	85 "main.c" 1
 672               		sei
 673 0312 EBE9      	 ;  0 "" 2
 675 0316 1082      	.LM50:
 176:main.c        **** 
 177:main.c        **** 	//конфигурируем таймер
 178:main.c        **** 	TCCR0 = 0b00000111;
 179:main.c        **** 	TIMSK = (1 << TOIE0);
 676               	OAPP */
 677               		ldi r26,lo8(85)
 678 0318 EAE9      		ldi r27,hi8(85)
 679 031a F0E0      		ldi r30,lo8(85)
 680 031c 88E9      		ldi r31,hi8(85)
 681 031e 8083      		ld r24,Z
 180:main.c        **** 
 181:main.c        **** 
 182:main.c        **** 	//настраиваем уарт на прием/передачу данных
 682               	r24,lo8(-29)
 683               		st X,r24
 685 0322 F0E0      	.LM51:
 686 0324 8EE0      		std Y+9,__zero_reg__
 687 0326 8083      		std Y+8,__zero_reg__
 183:main.c        **** 
 184:main.c        **** 	//устанавливаем скорость передачи
 185:main.c        **** 	UBRR1L = LO(bauddivider);
 688               	.L23
 689               	.L24:
 691               	.LM52:
 692 0328 7894      		ldd r18,Y+8
 693               		ldd r19,Y+9
 186:main.c        **** 
 187:main.c        **** 	UBRR1H = HI(bauddivider);
 188:main.c        **** 	//регистр статуса уарт
 694               	20,Y+8
 695               		movw r24,r28
 696               		adiw r24,10
 697 032a A5E5      		movw r30,r24
 698 032c B0E0      		add r30,r18
 699 032e E5E5      		adc r31,r19
 700 0330 F0E0      		st Z,r20
 702 0334 837E      	.LM53:
 703 0336 8C93      		ldd r24,Y+8
 189:main.c        **** 
 190:main.c        **** 	UCSR1A = 0;
 191:main.c        **** 	//разрешаем работу передатчика и приемника
 192:main.c        **** 	//прерывания по завершению приема
 193:main.c        **** 	//и запрещаем прерывание по завершению передачи
 194:main.c        **** 	UCSR1B = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE1) | (0 << TXCIE1);
 704               	+9
 705               		adiw r24,1
 706 0338 1986      		std Y+9,r25
 707 033a 1886      		std Y+8,r24
 708 033c 00C0      	.L23:
 709               		ldd r24,Y+8
 195:main.c        **** 
 196:main.c        **** 	//асинхронный режим последовательной связи
 710               	25,Y+9
 711               		cpi r24,255
 712 033e 2885      		cpc r25,__zero_reg__
 713 0340 3985      		breq .L24
 714 0342 4885      		brlt .L24
 716 0346 0A96      	.LM54:
 717 0348 FC01      		movw r24,r28
 718 034a E20F      		adiw r24,10
 719 034c F31F      		sts (RAMPointer)+1,r25
 720 034e 4083      		sts RAMPointer,r24
 721               	.L34:
 723 0350 8885      	.LM55:
 724 0352 9985      		lds r30,RAMPointer
 725 0354 0196      		lds r31,(RAMPointer)+1
 726 0356 9987      		ld r24,Z
 727 0358 8887      		std Y+1,r24
 729 035a 8885      	.LM56:
 730 035c 9985      		lds r24,keyFlag
 731 035e 8F3F      		tst r24
 732 0360 9105      		breq .L25
 734 0364 04F0      	.LM57:
 197:main.c        **** 
 198:main.c        **** 	//формат данных 8 бит 1 стоп-бит
 199:main.c        **** 	UCSR1C = (0<<UMSEL1)|(1<<USBS1)|(1<<UCSZ10)|(1<<UCSZ11);
 735               	bn	68,0,214,.LM58-.LFBB8
 736               	.LM58:
 737 0366 CE01      		lds r24,notSend
 738 0368 0A96      		tst r24
 739 036a 9093 0000 		breq .L26
 741               	.LM59:
 200:main.c        **** 
 201:main.c        **** 
 202:main.c        **** 	//разрешаем прерывания глобально
 203:main.c        **** 	sei();
 204:main.c        **** 
 205:main.c        **** 	//настройка режима сна
 206:main.c        **** 	set_sleep_mode ( SLEEP_MODE_IDLE );
 742               	4,Y+1
 743               		call sendByte
 745 0376 F091 0000 	.LM60:
 746 037a 8081      		sts notSend,__zero_reg__
 747 037c 8983      	.L26:
 207:main.c        **** 
 208:main.c        **** 
 748               	n	68,0,221,.LM61-.LFBB8
 749               	.LM61:
 750 037e 8091 0000 		lds r24,notSend
 751 0382 8823      		tst r24
 752 0384 01F0      		breq .+2
 209:main.c        **** 	//создадим в памяти массив чисел для проверки правильности работы программы
 210:main.c        **** 	unsigned char data[256];
 211:main.c        **** 	//заполним его числами от 0 до 255
 753               	 .L27
 755 0386 0E94 0000 	.LM62:
 756               		ldd r24,Y+2
 212:main.c        **** 	for (i = 0; i < 256; i++)
 213:main.c        **** 	{
 214:main.c        **** 		data[i] = i;
 757               	 r25,Y+3
 758               		cpi r24,2
 759 038a 8091 0000 		cpc r25,__zero_reg__
 760 038e 8823      		brne .L28
 215:main.c        **** 	}
 216:main.c        **** 	//первоначально ссылаемся на начало этого массива
 217:main.c        **** 	RAMPointer = data;
 762               	:
 763               		call nextAdr
 765 0394 0E94 0000 	.LM64:
 218:main.c        **** 
 766               	 Y+3,__zero_reg__
 767               		std Y+2,__zero_reg__
 769               	.LM65:
 219:main.c        **** 
 220:main.c        **** 	//главный цикл программы
 221:main.c        **** 	for (;;)
 770               	 r24,lo8(1)
 771               		sts notSend,r24
 772 039c 8091 0000 	.L28:
 774 03a2 01F0      	.LM66:
 775 03a4 00C0      		lds r24,timeFlag
 222:main.c        **** 	{
 223:main.c        **** 		//получаем значение из памяти
 224:main.c        **** 		value = *RAMPointer;
 776               	24
 777               		brne .+2
 778 03a6 8A81      		rjmp .L27
 780 03aa 8230      	.LM67:
 781 03ac 9105      		lds r24,lightFlag
 782 03ae 01F4      		tst r24
 225:main.c        **** 
 226:main.c        **** 		if ( keyFlag )
 783               	+2
 784               		rjmp .L29
 227:main.c        **** 		{
 786               	68:
 787               		ldd r24,Y+4
 788 03b4 1B82      		ldd r25,Y+5
 789 03b6 1A82      		subi r28,lo8(-266)
 228:main.c        **** 			//сканировать клавиатуру
 790               	i r29,hi8(-266)
 791               		std Y+1,r25
 792 03b8 81E0      		st Y,r24
 793 03ba 8093 0000 		subi r28,lo8(266)
 794               		sbci r29,hi8(266)
 229:main.c        **** 			scanKey();
 230:main.c        **** 		}
 231:main.c        **** 		//если слово еще не отсылалось через уарт
 795               	 r28,lo8(-266)
 796               		sbci r29,hi8(-266)
 797 03be 8091 0000 		ld r24,Y
 798 03c2 8823      		ldd r25,Y+1
 799 03c4 01F4      		subi r28,lo8(266)
 800 03c6 00C0      		sbci r29,hi8(266)
 232:main.c        **** 		if ( notSend )
 233:main.c        **** 		{
 801               	24,1
 802               		cpc r25,__zero_reg__
 803 03c8 8091 0000 		breq .L31
 804 03cc 8823      		subi r28,lo8(-266)
 805 03ce 01F4      		sbci r29,hi8(-266)
 806 03d0 00C0      		ld r24,Y
 234:main.c        **** 			//отправляем на ПК
 235:main.c        **** 			sendByte(value);
 236:main.c        **** 			notSend = 0;
 237:main.c        **** 		}
 807               	25,Y+1
 808               		subi r28,lo8(266)
 809 03d2 8C81      		sbci r29,hi8(266)
 810 03d4 9D81      		cpi r24,2
 811 03d6 C65F      		cpc r25,__zero_reg__
 812 03d8 DE4F      		brne .+2
 813 03da 9983      		rjmp .L32
 814 03dc 8883      		subi r28,lo8(-266)
 815 03de CA50      		sbci r29,hi8(-266)
 816 03e0 D140      		ld r24,Y
 817 03e2 C65F      		ldd r25,Y+1
 818 03e4 DE4F      		subi r28,lo8(266)
 819 03e6 8881      		sbci r29,hi8(266)
 820 03e8 9981      		sbiw r24,0
 821 03ea CA50      		breq .+2
 822 03ec D140      		rjmp .L29
 823 03ee 8130      	.L30:
 825 03f2 01F0      	.LM69:
 826 03f4 C65F      		ldi r30,lo8(35)
 827 03f6 DE4F      		ldi r31,hi8(35)
 828 03f8 8881      		ldd r24,Y+1
 829 03fa 9981      		mov r24,r24
 830 03fc CA50      		ldi r25,lo8(0)
 831 03fe D140      		andi r24,lo8(128)
 832 0400 8230      		andi r25,hi8(128)
 833 0402 9105      		lsl r24
 834 0404 01F4      		rol r25
 835 0406 00C0      		mov r18,r24
 836 0408 C65F      		ldd r24,Y+1
 837 040a DE4F      		mov r24,r24
 838 040c 8881      		ldi r25,lo8(0)
 839 040e 9981      		andi r24,lo8(64)
 840 0410 CA50      		andi r25,hi8(64)
 841 0412 D140      		lsl r24
 842 0414 0097      		rol r25
 843 0416 01F0      		lsl r24
 844 0418 00C0      		rol r25
 845               		or r18,r24
 238:main.c        **** 		
 239:main.c        **** 		if ( notSend == 0 )
 240:main.c        **** 		{
 241:main.c        **** 			//если прошло 6 секунд
 846               	0)
 847               		andi r24,lo8(32)
 848 041a E3E2      		andi r25,hi8(32)
 849 041c F0E0      		lsl r24
 850 041e 8981      		rol r25
 851 0420 882F      		lsl r24
 852 0422 90E0      		rol r25
 853 0424 8078      		lsl r24
 854 0426 9070      		rol r25
 855 0428 880F      		or r24,r18
 856 042a 991F      		st Z,r24
 858 042e 8981      	.LM70:
 859 0430 882F      		ldi r24,lo8(1)
 860 0432 90E0      		ldi r25,hi8(1)
 861 0434 8074      		std Y+5,r25
 862 0436 9070      		std Y+4,r24
 863 0438 880F      		rjmp .L29
 864 043a 991F      	.L31:
 866 043e 991F      	.LM71:
 867 0440 282B      		ldi r30,lo8(35)
 868 0442 8981      		ldi r31,hi8(35)
 869 0444 882F      		ldd r24,Y+1
 870 0446 90E0      		mov r24,r24
 871 0448 8072      		ldi r25,lo8(0)
 872 044a 9070      		andi r24,lo8(16)
 873 044c 880F      		andi r25,hi8(16)
 874 044e 991F      		lsl r24
 875 0450 880F      		rol r25
 876 0452 991F      		mov r18,r24
 877 0454 880F      		ldd r24,Y+1
 878 0456 991F      		mov r24,r24
 879 0458 822B      		ldi r25,lo8(0)
 880 045a 8083      		andi r24,lo8(8)
 242:main.c        **** 			if ( n == 2 )
 243:main.c        **** 			{
 881               		lsl r24
 882               		rol r25
 883 045c 81E0      		or r18,r24
 884 045e 90E0      		ldd r24,Y+1
 885 0460 9D83      		mov r24,r24
 886 0462 8C83      		ldi r25,lo8(0)
 887 0464 00C0      		andi r24,lo8(4)
 888               		andi r25,hi8(4)
 244:main.c        **** 				nextAdr();
 245:main.c        **** 				n = 0;
 246:main.c        **** 				notSend = 1;
 247:main.c        **** 			}
 889               	
 890               		rol r25
 891 0466 E3E2      		lsl r24
 892 0468 F0E0      		rol r25
 893 046a 8981      		lsl r24
 894 046c 882F      		rol r25
 895 046e 90E0      		or r24,r18
 896 0470 8071      		st Z,r24
 898 0474 880F      	.LM72:
 899 0476 991F      		ldi r24,lo8(2)
 900 0478 282F      		ldi r25,hi8(2)
 901 047a 8981      		std Y+5,r25
 902 047c 882F      		std Y+4,r24
 903 047e 90E0      		rjmp .L29
 904 0480 8870      	.L32:
 906 0484 880F      	.LM73:
 907 0486 991F      		ldi r30,lo8(35)
 908 0488 880F      		ldi r31,hi8(35)
 909 048a 991F      		ldd r24,Y+1
 910 048c 282B      		mov r24,r24
 911 048e 8981      		ldi r25,lo8(0)
 912 0490 882F      		andi r24,lo8(2)
 913 0492 90E0      		andi r25,hi8(2)
 914 0494 8470      		lsl r24
 915 0496 9070      		rol r25
 916 0498 880F      		mov r18,r24
 917 049a 991F      		ldd r24,Y+1
 918 049c 880F      		mov r24,r24
 919 049e 991F      		ldi r25,lo8(0)
 920 04a0 880F      		andi r24,lo8(1)
 921 04a2 991F      		andi r25,hi8(1)
 922 04a4 822B      		lsl r24
 923 04a6 8083      		rol r25
 248:main.c        **** 			//считаем сколько прождали
 249:main.c        **** 			if ( timeFlag )
 924               	 r24,Y+1
 925               		mov r24,r24
 926 04a8 82E0      		ldi r25,lo8(0)
 927 04aa 90E0      		andi r24,lo8(32)
 928 04ac 9D83      		andi r25,hi8(32)
 929 04ae 8C83      		lsl r24
 930 04b0 00C0      		rol r25
 931               		lsl r24
 250:main.c        **** 			{
 251:main.c        **** 				if ( lightFlag )
 252:main.c        **** 				{
 253:main.c        **** 				//отображать слова на индикаторах
 932               	
 933               		lsl r24
 934 04b2 E3E2      		rol r25
 935 04b4 F0E0      		or r24,r18
 936 04b6 8981      		st Z,r24
 938 04ba 90E0      	.LM74:
 939 04bc 8270      		std Y+5,__zero_reg__
 940 04be 9070      		std Y+4,__zero_reg__
 941 04c0 880F      	.L29:
 943 04c4 282F      	.LM75:
 944 04c6 8981      		sts timeFlag,__zero_reg__
 946 04ca 90E0      	.LM76:
 947 04cc 8170      		ldd r24,Y+2
 948 04ce 9070      		ldd r25,Y+3
 949 04d0 880F      		adiw r24,1
 950 04d2 991F      		std Y+3,r25
 951 04d4 880F      		std Y+2,r24
 952 04d6 991F      	.L27:
 954 04da 8981      	.LM77:
 955 04dc 882F      		lds r24,arriveCom
 956 04de 90E0      		tst r24
 957 04e0 8072      		breq .L33
 959 04e4 880F      	.LM78:
 960 04e6 991F      		sts arriveCom,__zero_reg__
 962 04ea 991F      	.LM79:
 963 04ec 880F      		call exeCom
 964 04ee 991F      	.L33:
 966 04f2 8083      	.LM80:
 254:main.c        **** 					//какую тройку выводить на индикаторы
 255:main.c        **** 					switch (k)
 967               		ldi r30,lo8(85)
 968               		ldi r31,hi8(85)
 969 04f4 1D82      		ld r24,Z
 970 04f6 1C82      		ori r24,lo8(32)
 971               		st X,r24
 256:main.c        **** 					{
 257:main.c        **** 						case 0:
 258:main.c        **** 							//выводим первые 3 бита
 259:main.c        **** 							PORTE = (value & 0b10000000) << PE1 | (value & 0b01000000) << PE2 
 972               	PP */
 973               	 ;  273 "main.c" 1
 974 04f8 1092 0000 		sleep
 260:main.c        **** 										| (value & 0b00100000) << PE3;
 975               	;  0 "" 2
 976               	/* #NOAPP */
 977 04fc 8A81      		ldi r26,lo8(85)
 978 04fe 9B81      		ldi r27,hi8(85)
 979 0500 0196      		ldi r30,lo8(85)
 980 0502 9B83      		ldi r31,hi8(85)
 981 0504 8A83      		ld r24,Z
 982               		andi r24,lo8(-33)
 261:main.c        **** 							k = 1;
 262:main.c        **** 							break;
 263:main.c        **** 						case 1:
 264:main.c        **** 							//выводим вторые 3 бита
 265:main.c        **** 							PORTE = (value & 0b00010000) << PE1 | (value & 0b00001000) << PE2 
 983               	4
 984               		rjmp .L34
 266:main.c        **** 										| (value & 0b00000100) << PE3;
 267:main.c        **** 							k = 2;
 268:main.c        **** 							break;
 988               	bs	"k:(0,1)",128,0,0,4
 269:main.c        **** 						case 2:
 270:main.c        **** 							//выводим последние 2 бита и бит четности
 991               	tabs	"data:(0,18)=ar(0,17);0;255;(0,11)",128,0,0,10
 994               	.Lscope8:
 271:main.c        **** 							PORTE = (value & 0b00000010) << PE1 | (value & 0b00000001) << PE2 
 272:main.c        **** 										| (value & 0b00100000) << PE3;
 273:main.c        **** 							k = 0;
 995               	ta
 996               	.LC1:
 997 0516 A5E5      		.string	"key_on"
 998 0518 B0E0      	.LC2:
 999 051a E5E5      		.string	"key_off"
 1000 051c F0E0      	.LC3:
 1001 051e 8081      		.string	"light_on"
 1002 0520 8062      	.LC4:
 1003 0522 8C93      		.string	"light_off"
 1004               	.LC5:
 1005               		.string	"get"
 1006 0524 8895      	.LC6:
 1007               		.string	"bad arddress\n\r"
 1008               	.LC7:
 1009               		.string	"undefined command\n\r"
 1010 0526 A5E5      		.text
 1012 052a E5E5      	.global	exeCom
 1014 052e 8081      	exeCom:
 1016 0532 8C93      	.LM81:
 1017 0534 00C0      	.LFBB9:
 1018               		push r29
 1019               		push r28
 1020               		rcall .
 1021               		rcall .
 1022               		rcall .
 1023               		in r28,__SP_L__
 1024               		in r29,__SP_H__
 1025               	/* prologue: function */
 1026               	/* frame size = 6 */
 1028               	.LM82:
 1029               		ldi r24,lo8(buf)
 1030 001e 6B65 795F 		ldi r25,hi8(buf)
 1030      6F6E 00
 1031               		ldi r18,lo8(.LC1)
 1032 0025 6B65 795F 		ldi r19,hi8(.LC1)
 1032      6F66 6600 
 1033               		movw r22,r18
 1034 002d 6C69 6768 		ldi r20,lo8(6)
 1034      745F 6F6E 
 1034      00
 1035               		ldi r21,hi8(6)
 1036 0036 6C69 6768 		call strncmp
 1036      745F 6F66 
 1036      6600 
 1037               		sbiw r24,0
 1038 0040 6765 7400 		brne .L37
 1040 0044 6261 6420 	.LM83:
 1040      6172 6464 
 1040      7265 7373 
 1040      0A0D 00
 1041               		ldi r24,lo8(1)
 1042 0053 756E 6465 		sts keyFlag,r24
 1042      6669 6E65 
 1042      6420 636F 
 1042      6D6D 616E 
 1042      640A 0D00 
 1043               		rjmp .L47
 1044               	.L37:
 1046               	.LM84:
 1047               		ldi r24,lo8(buf)
 274:main.c        **** 							break;
 275:main.c        **** 					}
 276:main.c        **** 				}
 277:main.c        **** 				timeFlag = 0;
 278:main.c        **** 				n++;
 279:main.c        **** 			}
 280:main.c        **** 		}
 281:main.c        **** 
 282:main.c        **** 		//если принята команда по уарт
 1048               	2)
 1049               		movw r22,r18
 1050               		ldi r20,lo8(7)
 1051 0536 DF93      		ldi r21,hi8(7)
 1052 0538 CF93      		call strncmp
 1053 053a 00D0      		sbiw r24,0
 1054 053c 00D0      		brne .L39
 1056 0540 CDB7      	.LM85:
 1057 0542 DEB7      		sts keyFlag,__zero_reg__
 1058               		rjmp .L47
 1059               	.L39:
 283:main.c        **** 		if ( arriveCom )
 284:main.c        **** 		{
 285:main.c        **** 			//сбрасываем флаг
 1060               		ldi r25,hi8(buf)
 1061               		ldi r18,lo8(.LC2)
 1062 0544 80E0      		ldi r19,hi8(.LC2)
 1063 0546 90E0      		movw r22,r18
 1064 0548 20E0      		ldi r20,lo8(7)
 1065 054a 30E0      		ldi r21,hi8(7)
 1066 054c B901      		call strncmp
 1067 054e 46E0      		sbiw r24,0
 1068 0550 50E0      		brne .L39
 1070 0556 0097      	.LM85:
 1071 0558 01F4      		sts keyFlag,__zero_reg__
 286:main.c        **** 			arriveCom = 0;
 287:main.c        **** 			//обрабатываем команду
 1072               	
 1073               		ldi r24,lo8(buf)
 1074 055a 81E0      		ldi r25,hi8(buf)
 1075 055c 8093 0000 		ldi r18,lo8(.LC2)
 1076 0560 00C0      		ldi r19,hi8(.LC2)
 1077               		movw r22,r18
 288:main.c        **** 			exeCom();
 289:main.c        **** 		}
 1078               	r24,0
 1079               		brne .L37
 1081 0564 90E0      	.LM83:
 1082 0566 20E0      		ldi r24,lo8(1)
 1083 0568 30E0      		sts keyFlag,r24
 1084 056a B901      		rjmp .L47
 1085 056c 47E0      	.L37:
 1087 0570 0E94 0000 	.LM84:
 1088 0574 0097      		ldi r24,lo8(buf)
 1089 0576 01F4      		ldi r25,hi8(buf)
 290:main.c        **** 		//после того как все действия выполнены засыпаем
 291:main.c        **** 		sleep_mode();
 1090               	(.LC2)
 1091               		ldi r19,hi8(.LC2)
 1092 0578 1092 0000 		movw r22,r18
 1093 057c 00C0      		ldi r20,lo8(7)
 1094               		ldi r21,hi8(7)
 292:main.c        **** 		
 293:main.c        **** 	}
 1095               	.LM83-.LFBB9
 1096               	.LM83:
 1097 057e 80E0      		ldi r24,lo8(1)
 1098 0580 90E0      		sts keyFlag,r24
 1099 0582 20E0      		rjmp .L47
 1100 0584 30E0      	.L37:
 1102 0588 48E0      	.LM84:
 1103 058a 50E0      		ldi r24,lo8(buf)
 1104 058c 0E94 0000 		ldi r25,hi8(buf)
 1105 0590 0097      		ldi r18,lo8(.LC2)
 1106 0592 01F4      		ldi r19,hi8(.LC2)
 294:main.c        **** 	return 0;
 295:main.c        **** }
 1107               	8
 1108               		ldi r20,lo8(7)
 1109 0594 81E0      		ldi r21,hi8(7)
 1110 0596 8093 0000 		call strncmp
 1111 059a 00C0      		sbiw r24,0
 1112               		brne .L39
 296:main.c        **** 
 297:main.c        **** 
 1113               	 keyFlag,r24
 1114               		rjmp .L47
 1115 059c 80E0      	.L37:
 1117 05a0 20E0      	.LM84:
 1118 05a2 30E0      		ldi r24,lo8(buf)
 1119 05a4 B901      		ldi r25,hi8(buf)
 1120 05a6 49E0      		ldi r18,lo8(.LC2)
 1121 05a8 50E0      		ldi r19,hi8(.LC2)
 1122 05aa 0E94 0000 		movw r22,r18
 1123 05ae 0097      		ldi r20,lo8(7)
 1124 05b0 01F4      		ldi r21,hi8(7)
 298:main.c        **** 
 299:main.c        **** void exeCom()
 1125               	p
 1126               		sbiw r24,0
 1127 05b2 1092 0000 		brne .L39
 1129               	.LM85:
 300:main.c        **** {
 301:main.c        **** 	char bufer[4];
 1130               	8,0,289,.LM84-.LFBB9
 1131               	.LM84:
 1132 05b8 80E0      		ldi r24,lo8(buf)
 1133 05ba 90E0      		ldi r25,hi8(buf)
 1134 05bc 20E0      		ldi r18,lo8(.LC2)
 1135 05be 30E0      		ldi r19,hi8(.LC2)
 1136 05c0 B901      		movw r22,r18
 1137 05c2 43E0      		ldi r20,lo8(7)
 1138 05c4 50E0      		ldi r21,hi8(7)
 1139 05c6 0E94 0000 		call strncmp
 1140 05ca 0097      		sbiw r24,0
 1141 05cc 01F4      		brne .L39
 302:main.c        **** 	unsigned char i, adr;
 303:main.c        **** 	if ( strncmp(buf, "key_on", 6) == 0 )
 304:main.c        **** 	{
 1142               	,291,.LM85-.LFBB9
 1143               	.LM85:
 1144 05ce 1A82      		sts keyFlag,__zero_reg__
 1145 05d0 00C0      		rjmp .L47
 1146               	.L39:
 305:main.c        **** 		keyFlag = 1;
 306:main.c        **** 	}
 1147               		ldi r25,hi8(buf)
 1148               		ldi r18,lo8(.LC2)
 1149 05d2 8A81      		ldi r19,hi8(.LC2)
 1150 05d4 482F      		movw r22,r18
 1151 05d6 50E0      		ldi r20,lo8(7)
 1152 05d8 8A81      		ldi r21,hi8(7)
 1153 05da 882F      		call strncmp
 1154 05dc 90E0      		sbiw r24,0
 1155 05de 0496      		brne .L39
 1157 05e2 E050      	.LM85:
 1158 05e4 F040      		sts keyFlag,__zero_reg__
 1159 05e6 2081      		rjmp .L47
 1160 05e8 CE01      	.L39:
 1162 05ec FC01      	.LM86:
 1163 05ee E40F      		ldi r24,lo8(buf)
 1164 05f0 F51F      		ldi r25,hi8(buf)
 1165 05f2 2083      		ldi r18,lo8(.LC3)
 1166               		ldi r19,hi8(.LC3)
 1167               		movw r22,r18
 1168 05f4 8A81      		ldi r20,lo8(8)
 1169 05f6 8F5F      		ldi r21,hi8(8)
 1170 05f8 8A83      		call strncmp
 1171               		sbiw r24,0
 1172 05fa 8A81      		brne .L40
 1174 05fe 00F0      	.LM87:
 307:main.c        **** 	else if ( strncmp(buf, "key_off", 7) == 0)
 308:main.c        **** 	{
 1175               	BB9
 1176               	.LM86:
 1177 0600 CE01      		ldi r24,lo8(buf)
 1178 0602 0396      		ldi r25,hi8(buf)
 1179 0604 0E94 0000 		ldi r18,lo8(.LC3)
 1180 0608 8983      		ldi r19,hi8(.LC3)
 309:main.c        **** 		keyFlag = 0;
 1181               	sbiw r24,0
 1182               		brne .L39
 1184 060c 8823      	.LM85:
 1185 060e 01F0      		sts keyFlag,__zero_reg__
 310:main.c        **** 	}
 311:main.c        **** 	else if ( strncmp(buf, "light_on", 8) == 0)
 1186               	
 1187               		ldi r24,lo8(buf)
 1188 0610 8981      		ldi r25,hi8(buf)
 1189 0612 882F      		ldi r18,lo8(.LC2)
 1190 0614 90E0      		ldi r19,hi8(.LC2)
 1191 0616 9093 0000 		movw r22,r18
 1192 061a 8093 0000 		ldi r20,lo8(7)
 1193 061e 00C0      		ldi r21,hi8(7)
 1194               		call strncmp
 312:main.c        **** 	{
 313:main.c        **** 		lightFlag = 1;
 314:main.c        **** 	}
 315:main.c        **** 	else if (strncmp(buf, "light_off", 9) == 0)
 1195               	M83:
 1196               		ldi r24,lo8(1)
 1197 0620 80E0      		sts keyFlag,r24
 1198 0622 90E0      		rjmp .L47
 1199 0624 0E94 0000 	.L37:
 1201               	.LM84:
 316:main.c        **** 	{
 317:main.c        **** 		lightFlag = 0;
 318:main.c        **** 	}
 319:main.c        **** 	else if (strncmp(buf, "get", 3) == 0)
 320:main.c        **** 	{
 1202               	4,lo8(buf)
 1203               		ldi r25,hi8(buf)
 1204 062a 80E0      		ldi r18,lo8(.LC2)
 1205 062c 90E0      		ldi r19,hi8(.LC2)
 1206 062e 0E94 0000 		movw r22,r18
 1207               		ldi r20,lo8(7)
 1208               		ldi r21,hi8(7)
 321:main.c        **** 		//проверяем корректность адреса
 322:main.c        **** 		for (i = 0; i < 4; i++)
 323:main.c        **** 		{
 324:main.c        **** 			bufer[i] = buf[i+4];
 325:main.c        **** 		}
 326:main.c        **** 		adr = atoi(bufer);
 327:main.c        **** 		if ( adr > 0 && adr < 4096)
 1209               	.LM83-.LFBB9
 1210               	.LM83:
 1211 0632 2696      		ldi r24,lo8(1)
 1212 0634 0FB6      		sts keyFlag,r24
 1213 0636 F894      		rjmp .L47
 1214 0638 DEBF      	.L37:
 1216 063c CDBF      	.LM84:
 1217 063e CF91      		ldi r24,lo8(buf)
 1218 0640 DF91      		ldi r25,hi8(buf)
 1219 0642 0895      		ldi r18,lo8(.LC2)
 1220               		ldi r19,hi8(.LC2)
 1221               		movw r22,r18
 1222               		ldi r20,lo8(7)
 1223               		ldi r21,hi8(7)
 1224               		call strncmp
 1225               		sbiw r24,0
 1226               		brne .L39
 1228               	.LM85:
 1229               		sts keyFlag,__zero_reg__
 1230               		rjmp .L47
 328:main.c        **** 		{
 329:main.c        **** 			RAMPointer = adr;
 330:main.c        **** 		}
 331:main.c        **** 		else 
 1231               	,.LM86-.LFBB9
 1232               	.LM86:
 1233               		ldi r24,lo8(buf)
 1234 0644 DF93      		ldi r25,hi8(buf)
 1235 0646 CF93      		ldi r18,lo8(.LC3)
 1236 0648 00D0      		ldi r19,hi8(.LC3)
 1237 064a CDB7      		movw r22,r18
 1238 064c DEB7      		ldi r20,lo8(8)
 1239               		ldi r21,hi8(8)
 1240               		call strncmp
 332:main.c        **** 		{
 333:main.c        **** 			sendStr("bad arddress\n\r");
 1241               	keyFlag,__zero_reg__
 1242               		rjmp .L47
 1243 064e E6E3      	.L39:
 1245 0652 8081      	.LM86:
 1246 0654 882F      		ldi r24,lo8(buf)
 1247 0656 90E0      		ldi r25,hi8(buf)
 1248 0658 9A83      		ldi r18,lo8(.LC3)
 1249 065a 8983      		ldi r19,hi8(.LC3)
 334:main.c        **** 		}
 335:main.c        **** 	}
 1250               	sbiw r24,0
 1251               		brne .L39
 1253 065e 9A81      	.LM85:
 1254 0660 8072      		sts keyFlag,__zero_reg__
 1255 0662 9070      		rjmp .L47
 1256 0664 0097      	.L39:
 336:main.c        **** 	else 
 337:main.c        **** 	{
 338:main.c        **** 		sendStr("undefined command\n\r");
 1258               	.LC2)
 1259               		ldi r19,hi8(.LC2)
 1260 0668 0E94 0000 		movw r22,r18
 339:main.c        **** 	} 
 1261               	r24,0
 1262               		brne .L37
 1264 066e 8093 0000 	.LM83:
 1265 0672 00C0      		ldi r24,lo8(1)
 1266               		sts keyFlag,r24
 340:main.c        **** 
 341:main.c        **** 	//вычисляем контрольную сумму
 1267               	.L47
 1268               	.L37:
 1270 0676 9A81      	.LM84:
 1271 0678 8074      		ldi r24,lo8(buf)
 1272 067a 9070      		ldi r25,hi8(buf)
 1273 067c 0097      		ldi r18,lo8(.LC2)
 1274 067e 01F0      		ldi r19,hi8(.LC2)
 342:main.c        **** 	//отправляем на уарт вычисленную сумму
 343:main.c        **** 	
 344:main.c        **** 	return;
 1275               	2,r18
 1276               		ldi r20,lo8(7)
 1277 0680 0E94 0000 		ldi r21,hi8(7)
 345:main.c        **** }
 1278               	.LM83-.LFBB9
 1279               	.LM83:
 1280 0684 81E0      		ldi r24,lo8(1)
 1281 0686 8093 0000 		sts keyFlag,r24
 1282               		rjmp .L47
 1283               	.L37:
 346:main.c        **** 
 347:main.c        **** 
 1284               	n	68,0,289,.LM84-.LFBB9
 1285               	.LM84:
 1286 068a 0F90      		ldi r24,lo8(buf)
 1287 068c 0F90      		ldi r25,hi8(buf)
 1288 068e CF91      		ldi r18,lo8(.LC2)
 1289 0690 DF91      		ldi r19,hi8(.LC2)
 1290 0692 0895      		movw r22,r18
 1291               		ldi r20,lo8(7)
 1292               		ldi r21,hi8(7)
 1293               		call strncmp
 1294               		sbiw r24,0
 1295               		brne .L39
 1297               	.LM85:
 1298               		sts keyFlag,__zero_reg__
 1299               		rjmp .L47
 1300               	.L39:
 1302               	.LM86:
 1303               		ldi r24,lo8(buf)
 1304               		ldi r25,hi8(buf)
 1305               		ldi r18,lo8(.LC3)
 1306               		ldi r19,hi8(.LC3)
 1307               		movw r22,r18
 1308               		ldi r20,lo8(8)
 1309               		ldi r21,hi8(8)
 1310               		call strncmp
 1311               		sbiw r24,0
 1312               		brne .L40
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
  c:\Temp/ccDHgd4g.s:2      *ABS*:0000003f __SREG__
  c:\Temp/ccDHgd4g.s:3      *ABS*:0000003e __SP_H__
  c:\Temp/ccDHgd4g.s:4      *ABS*:0000003d __SP_L__
  c:\Temp/ccDHgd4g.s:5      *ABS*:00000034 __CCP__
  c:\Temp/ccDHgd4g.s:6      *ABS*:00000000 __tmp_reg__
  c:\Temp/ccDHgd4g.s:7      *ABS*:00000001 __zero_reg__
  c:\Temp/ccDHgd4g.s:89     .bss:00000000 arriveCom
  c:\Temp/ccDHgd4g.s:95     .data:00000000 timeFlag
  c:\Temp/ccDHgd4g.s:102    .bss:00000001 keyFlag
  c:\Temp/ccDHgd4g.s:108    .data:00000001 lightFlag
  c:\Temp/ccDHgd4g.s:115    .bss:00000002 notSend
  c:\Temp/ccDHgd4g.s:121    .data:00000002 tcnt
  c:\Temp/ccDHgd4g.s:128    .bss:00000003 i_buf
  c:\Temp/ccDHgd4g.s:134    .bss:00000005 i_mes
  c:\Temp/ccDHgd4g.s:144    .text:00000000 sendByte
                            *COM*:00000002 RAMPointer
  c:\Temp/ccDHgd4g.s:234    .text:00000090 sendStr
                            *COM*:00000028 message
  c:\Temp/ccDHgd4g.s:287    .text:000000d6 nextAdr
  c:\Temp/ccDHgd4g.s:342    .text:00000128 prevAdr
  c:\Temp/ccDHgd4g.s:370    .text:00000148 __vector_30
                            *COM*:00000028 buf
  c:\Temp/ccDHgd4g.s:465    .text:000001da __vector_31
  c:\Temp/ccDHgd4g.s:551    .text:0000026a __vector_16
  c:\Temp/ccDHgd4g.s:609    .text:000002c2 main
  c:\Temp/ccDHgd4g.s:1230   .text:00000644 scanKey
  c:\Temp/ccDHgd4g.s:1047   .text:00000536 exeCom

UNDEFINED SYMBOLS
sprintf
strcpy
strncmp
atoi
__do_copy_data
__do_clear_bss
